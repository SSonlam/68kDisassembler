00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 3/15/2021 9:49:30 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      :CSS 422 Disassembler
00000000                             3  * Written by :Group RTX3080
00000000                             4  * Date       :
00000000                             5  * Description:This program will convert a memory image of
00000000                             6  *             istructions and data back to 68000 assembly
00000000                             7  *             language and output the disassembled code to
00000000                             8  *             the display.
00000000                             9  *-----------------------------------------------------------
00000000  =0000000D                 10  CR          EQU     $0D
00000000  =0000000A                 11  LF          EQU     $0A
00000000  =00000009                 12  HT          EQU     $09
00000000  =00000000                 13  MINADD      EQU     $00000000
00000000  =00FFFFFF                 14  MAXADD      EQU     $00FFFFFF
00000000                            15  
00001000                            16  START       ORG     $1000
00001000                            17  
00001000                            18  *-----------------------------------------------------------------------------------------------------------------
00001000                            19  *           I/O SECTION OF PROGRAM
00001000                            20  *-----------------------------------------------------------------------------------------------------------------
00001000                            21  
00001000                            22  *-----------I/O Welcome Message-----------------------------
00001000  43F9 00002800             23  WELCOME     LEA     WelcomeMsg,A1   *Prints the welcome message to console
00001006  103C 000E                 24              MOVE.B  #14,D0
0000100A  4E4F                      25              TRAP    #15
0000100C  5606                      26              ADDI.B  #3,D6           *Increment line counter by 3.
0000100E                            27              
0000100E  43F9 000028B2             28  GETSTART    LEA     Request1,A1     *Asks for the starting address
00001014  4E4F                      29              TRAP    #15
00001016  5206                      30              ADDI.B  #1,D6           *Increment line counter 1
00001018  43F9 000027E6             31              LEA     StartAdd,A1     *Stores given input as string at StartAdd
0000101E  103C 0002                 32              MOVE.B  #2,D0
00001022  4E4F                      33              TRAP    #15
00001024                            34              
00001024  4285                      35  CHECKSTART  CLR.L   D5              *Clears any values left in D5
00001026  183C 0000                 36              MOVE.B  #$0,D4          *Preload register with error byte
0000102A  4EB9 00002598             37              JSR     STRINGASCII     *Jumps to subroutine to convert ASCII character code to hex
00001030  B83C 0000                 38              CMP.B   #0,D4           *INVALID input
00001034  6700 0080                 39              BEQ     LOWERROR        *Branch to error message
00001038                            40              
00001038  7E00                      41              MOVE.L  #MINADD,D7      *Check minimum starting add
0000103A  BA87                      42              CMP.L   D7,D5           *Has to be above $00000000
0000103C  6D00 0078                 43              BLT     LOWERROR        
00001040                            44              
00001040  2E3C 00FFFFFF             45              MOVE.L  #MAXADD,D7      *Check maximum ending add
00001046  BA87                      46              CMP.L   D7,D5           *Has to be under $00FFFFFF
00001048  6E00 006C                 47              BGT     LOWERROR        
0000104C                            48                         
0000104C  2645                      49              MOVEA.L  D5,A3           *Saves the resulting value into A3
0000104E  23C5 000027F8             50              MOVE.L   D5,StartVal
00001054                            51              
00001054  103C 000E                 52  GETEND      MOVE.B  #14,D0          *Asks for the ending address
00001058  43F9 000028F3             53              LEA     Request2,A1     *Part one of message
0000105E  4E4F                      54              TRAP    #15
00001060  43F9 000027E6             55              LEA     StartAdd,A1     *Include starting address in message
00001066  4E4F                      56              TRAP    #15
00001068  43F9 0000291C             57              LEA     Request3,A1     *Part two of message
0000106E  4E4F                      58              TRAP    #15
00001070  5206                      59              ADDI.B  #1,D6           *Increment line counter by 1
00001072  43F9 000027EF             60              LEA     EndAdd,A1       *Stores given input as string at EndAdd
00001078  103C 0002                 61              MOVE.B  #2,D0
0000107C  4E4F                      62              TRAP    #15
0000107E                            63              
0000107E  4285                      64  CHECKEND    CLR.L   D5              *Clears any values left in D5
00001080  183C 0000                 65              MOVE.B  #$0,D4          *Preload register with error byte
00001084  4EB9 00002598             66              JSR     STRINGASCII     *Jumps to subroutine to convert ASCII character code to hex
0000108A  B83C 0000                 67              CMP.B   #0,D4           *INVALID input
0000108E  6700 0038                 68              BEQ     HIGHERROR       *Branch to error message
00001092  BA8B                      69              CMP.L   A3,D5           *Has to be higher than starting address
00001094  6D00 0032                 70              BLT     HIGHERROR
00001098                            71              
00001098  2E3C 00FFFFFF             72              MOVE.L  #MAXADD,D7      *Check maximum ending add
0000109E  BA87                      73              CMP.L   D7,D5           *Has to be under $00FFFFFF
000010A0  6E00 0026                 74              BGT     HIGHERROR
000010A4                            75              
000010A4  2845                      76              MOVEA.L D5,A4           *Saves the resulting value in D1 and moves it to EndVal
000010A6  23C5 000027FC             77              MOVE.L  D5,EndVal       *Saves the resulting value in D1 and moves it to EndVal
000010AC  4285                      78              CLR.L   D5              *Clearing all the registers used for intial IO
000010AE  4284                      79              CLR.L   D4
000010B0  4282                      80              CLR.L   D2
000010B2                            81              
000010B2  6000 0026                 82              BRA     LEAVEIO
000010B6                            83              
000010B6  43F9 00002952             84  LOWERROR    LEA     ErrorMsg,A1     *Print error message
000010BC  103C 000E                 85              MOVE.B  #14,D0
000010C0  4E4F                      86              TRAP    #15
000010C2  5206                      87              ADDI.B  #1,D6           *Increment line counter by one
000010C4  6000 FF48                 88              BRA     GETSTART        *Send back to ask for start address
000010C8                            89              
000010C8  43F9 00002952             90  HIGHERROR   LEA     ErrorMsg,A1     *Print error message
000010CE  103C 000E                 91              MOVE.B  #14,D0
000010D2  4E4F                      92              TRAP    #15
000010D4  5206                      93              ADDI.B  #1,D6           *Increment line counter by one
000010D6  6000 FF7C                 94              BRA     GETEND          *Send back to ask for start address
000010DA                            95              
000010DA                            96  *-----------I/O Calls to Op-Code Routine--------------------      
000010DA  2079 000027F8             97  LEAVEIO     MOVEA.L StartVal,A0     *Move the Start value given into A0
000010E0                            98               
000010E0  2208                      99  ReadMemory  MOVE.L  A0,D1           *Move the current location in memory to D1 to print
000010E2  103C 000F                100              MOVE.B  #15,D0
000010E6  143C 0010                101              MOVE.B  #16,D2
000010EA  4E4F                     102              TRAP    #15             *Print location of current Op-Code in memory to terminal
000010EC                           103              
000010EC  4EB9 0000260A            104              JSR     print_tabs      *Call print_tabs to print two tabs to screen
000010F2                           105              
000010F2  3618                     106              MOVE.W  (A0)+,D3        *Get Op-Code and save it in D3
000010F4  4EB9 00001136            107              JSR     FindCode        *Find Op-Code
000010FA  5206                     108              ADDI.B  #1,D6           *Add 1 to line counter
000010FC                           109              
000010FC  4EB9 00002652            110  BadCodeJump JSR     print_newline   *Call print_newline to print a new line
00001102  BC3C 001F                111              CMP.B   #31,D6          *Do we have full screen of data?
00001106  6700 000E                112              BEQ     NewPage
0000110A                           113              
0000110A  B1F9 000027FC            114  NextPage    CMPA.L  EndVal,A0       *Compares current location in memory to ending location
00001110  6C00 169C                115              BGE     end_prog        *If true, branch to EXIT
00001114  60CA                     116              BRA     ReadMemory      *If not true, branch back to ReadMemory
00001116                           117              
00001116  1C3C 0000                118  NewPage     MOVE.B  #0,D6           *Reset counter
0000111A  103C 000E                119              MOVE.B  #14,D0          *Will be printing message from A1
0000111E  43F9 0000292C            120              LEA     NewPageMsg,A1   *Ask user to press enter
00001124  4E4F                     121              TRAP    #15             *Print to console
00001126  43F9 000029F3            122              LEA     Wait,A1         *Load message to store user input
0000112C  103C 0002                123              MOVE.B  #2,D0           
00001130  4E4F                     124              TRAP    #15
00001132  4EF8 110A                125              JMP     NextPage        *Continue our code
00001136                           126  *-----------------------------------------------------------------------------------------------------------------
00001136                           127  *           OP-CODE SECTION OF PROGRAM
00001136                           128  *-----------------------------------------------------------------------------------------------------------------
00001136                           129  
00001136                           130  ************************************************************
00001136                           131  *Subroutine FindCode
00001136                           132  *Decription: Compares stored value in D3 to OP-CODES
00001136                           133  *We check NOP first because it's the easiest. From there we
00001136                           134  *load the op-code from D3 to D4 and shift 16 bits to the right
00001136                           135  *so that we can check what the first 2 bits are. Knowing the
00001136                           136  *first two bits we can narrow our search into smaller groups
00001136                           137  ************************************************************ 
00001136                           138  FindCode    
00001136  383C 4E71                139  NOPCode     MOVE.W  #$4E71,D4       *Moves the OP-Code value for NOP into D4
0000113A  B644                     140              CMP.W   D4,D3           *Checks to see if D4 and D3 (Current word in memory) are equivalent
0000113C  6600 000A                141              BNE     FINDXX          *Branch to NOPCode if they are equal
00001140  4EB9 000024D2            142              JSR     print_NOP
00001146  4E75                     143              RTS
00001148                           144  ************************************************************
00001148                           145  *Subroutine FINDXX
00001148                           146  *Decription: First step in our disassembly is we find the
00001148                           147  *first two bits in our instruction format and narrow down
00001148                           148  *which op-code it could be based on the 2 bits
00001148                           149  ************************************************************             
00001148  3803                     150  FINDXX      MOVE.W  D3,D4           *Move current op-code into D4
0000114A  E04C                     151              LSR.W   #$8,D4          *Shift 16 bits right to find first 2 bits
0000114C  EC4C                     152              LSR.W   #$6,D4
0000114E  B83C 0000                153              CMP.B   #%00,D4         *Check if our op-code starts with %00
00001152  6700 0222                154              BEQ     MOVEXCode       *It's a MOVE/MOVEA command
00001156  B83C 0001                155              CMP.B   #%01,D4         *Check if op-code starts with %01
0000115A  6700 0016                156              BEQ     CODE_01         *op-code could be BRA,JSR,MOVEQ,MOVEM,ADDQ,LEA,NOT,BGT.BLE
0000115E  B83C 0002                157              CMP.B   #%10,D4         *Check if op-code starts with %10
00001162  6700 0038                158              BEQ     CODE_10         *op-code could be SUB,OR
00001166  B83C 0003                159              CMP.B   #%11,D4         *Check if op-code begins with %11
0000116A  6700 004A                160              BEQ     CODE_11         *op-code could be ADD,AND,LSL,LSR,ROL,ROR,ASL,ASR
0000116E  6000 1608                161              BRA     print_data
00001172                           162              
00001172                           163  *-----------------------------------------------------------------------------------------------------------------
00001172                           164  *Sub-section: Leading 2 bits
00001172                           165  *Description: In this section is all of the code determining
00001172                           166  *which sub group we can branch into based on the leading 2 bits
00001172                           167  *of our instruction format.
00001172                           168  *-----------------------------------------------------------------------------------------------------------------            
00001172                           169  
00001172                           170  ************************************************************
00001172                           171  *Subroutine CODE_01
00001172                           172  *Decription: First two bits were 01. Know we have to check
00001172                           173  *the next 2 bits to see which op-code it is. Op-codes in this
00001172                           174  *group are BRA,JSR,MOVEQ,MOVEM,ADDQ,LEA,NOT,BGT.BLE
00001172                           175  ************************************************************             
00001172  3803                     176  CODE_01     MOVE.W  D3,D4           *Get fresh copy of op-code into D4
00001174  E04C                     177              LSR.W   #8,D4           *Shift right 12 bits
00001176  E84C                     178              LSR.W   #4,D4
00001178  B83C 0004                179              CMP.B   #%0100,D4       *Check if equal to $%0100       
0000117C  6700 005A                180              BEQ     CODE_0100       *Disassemble further, could be MOVEM,LEA,NOT,JSR
00001180  B83C 0006                181              CMP.B   #%0110,D4       *Check if its equal %0110
00001184  6700 0130                182              BEQ     CODE_0110       *Diassemble further, could be BCC(BGT,BLE,BEQ),BRA
00001188  B83C 0007                183              CMP.B   #%0111,D4       *Check if equal to %0111
0000118C  6700 0848                184              BEQ     MOVEQCode       *It's MOVEQ if its %0111
00001190  B83C 0005                185              CMP.B   #%0101,D4       *Check if it's ADDQ
00001194  6700 086A                186              BEQ     ADDQCODE
00001198  6000 15DE                187              BRA     print_data
0000119C                           188              
0000119C                           189  ************************************************************
0000119C                           190  *Subroutine CODE_10
0000119C                           191  *Decription: First two bits were 10. Know we have to check
0000119C                           192  *the next 2 bits to see which op-code it is. Op-codes in this
0000119C                           193  *group are SUB,OR
0000119C                           194  ************************************************************            
0000119C  3803                     195  CODE_10     MOVE.W  D3,D4           *Get fresh copy of op-code into D4
0000119E  E04C                     196              LSR.W   #8,D4           *Shift right 12 bits
000011A0  E84C                     197              LSR.W   #4,D4
000011A2  B83C 0009                198              CMP.B   #%1001,D4       *Check if its equal to %1001
000011A6  6700 076E                199              BEQ     SUBCode         *It's SUB
000011AA  B83C 0008                200              CMP.B   #%1000,D4       *Check if equal to $1000
000011AE  6700 07B2                201              BEQ     ORCode          *It's an ORCode
000011B2  6000 15C4                202              BRA     print_data
000011B6                           203  
000011B6                           204  ************************************************************
000011B6                           205  *Subroutine CODE_11
000011B6                           206  *Decription: First two bits were 11. Know we have to check
000011B6                           207  *the next 2 bits to see which op-code it is. Op-codes in this
000011B6                           208  *group are ADD,ADDA,AND,LSL,LSR,ROL,ROR,ASL,ASR
000011B6                           209  ************************************************************            
000011B6  3803                     210  CODE_11     MOVE.W  D3,D4           *Get fresh copy of op-code into D4
000011B8  E04C                     211              LSR.W   #8,D4           *Shift right 12 bits
000011BA  E84C                     212              LSR.W   #4,D4
000011BC  B83C 000E                213              CMP.B   #%1110,D4       *Check if its equal to %1110
000011C0  6700 01A0                214              BEQ     CODE_1110       *It could be LSL,LSR,ROL,ROR,ASL,ASR
000011C4  B83C 000C                215              CMP.B   #%1100,D4       *Check equal to %1100
000011C8  6700 02DA                216              BEQ     ANDCode         *It's an AND code
000011CC  B83C 000D                217              CMP.B   #%1101,D4       *Check if our 4 bits are %1101
000011D0  6700 01E0                218              BEQ     ADDXCode        *If it is then its ADD/ADDA
000011D4  6000 15A2                219              BRA     print_data
000011D8                           220  
000011D8                           221  *-----------------------------------------------------------------------------------------------------------------
000011D8                           222  *Sub-section: Leading 4 bits
000011D8                           223  *Description: In this section is all of the code leading into
000011D8                           224  *further disassembly of the instruction format now checking
000011D8                           225  *the leading 4 bits to see which op-code we have.
000011D8                           226  *-----------------------------------------------------------------------------------------------------------------            
000011D8                           227  
000011D8                           228  ************************************************************
000011D8                           229  *Subroutine CODE_0100
000011D8                           230  *Narrowed down possibilities for op-code. Now we have to
000011D8                           231  *determine whether op-code is MOVEM,LEA,NOT,JSR
000011D8                           232  ************************************************************            
000011D8  3803                     233  CODE_0100   MOVE.W  D3,D4       *Moves the current OP-Code to D4
000011DA  0244 FFC0                234              ANDI.W  #$FFC0,D4   *Mask bits that indicate JSR
000011DE  B87C 4E80                235              CMP.W   #$4E80,D4   *Compare to JSR bits
000011E2  6700 07CA                236              BEQ     JSRCode     *We know the instruction is JSR
000011E6                           237              
000011E6  3803                     238              MOVE.W  D3,D4
000011E8  0244 F1C0                239              ANDI.W  #$F1C0,D4   *Mask bits that indicate LEA
000011EC  B87C 41C0                240              CMP.W   #$41C0,D4   *Compare to LEA bits
000011F0  6700 007E                241              BEQ     CODE_LEA    *We know the instruction is LEA
000011F4                           242              
000011F4  3803                     243              MOVE.W  D3,D4       
000011F6  B87C 4E75                244              CMP.W   #$4E75,D4   *Compare to RTS bits
000011FA  6700 07CC                245              BEQ     RTSCode     *We know the instruction is RTS
000011FE                           246              
000011FE  3803                     247              MOVE.W  D3,D4
00001200  C87C FB80                248              AND.W   #$FB80,D4
00001204  B87C 4880                249              CMP.W   #$4880,D4
00001208  6700 0016                250              BEQ     CODE_MOVEM
0000120C                           251              
0000120C  3803                     252              MOVE.W  D3,D4
0000120E  C87C 0F00                253              AND.W   #$0F00, D4  *Masking to bits 8-11 
00001212  E04C                     254              LSR.W   #8,D4       *Shift right 8 bits to get the  bits
00001214  B87C 0006                255              CMP.W   #%0110, D4  *Checking to see if the bits in D4 match that of NOT command
00001218  6700 0036                256              BEQ     NOTCOMMAND
0000121C  6000 155A                257              BRA     print_data
00001220                           258              
00001220  4EB9 00002554            259  CODE_MOVEM  JSR     print_MOVEM
00001226  4EB9 00001A90            260              JSR     find_sz0
0000122C  4EB9 0000260A            261              JSR     print_tabs
00001232  3803                     262              MOVE.W  D3,D4
00001234  C87C 0400                263              AND.W   #$0400,D4
00001238  B87C 0400                264              CMP.W   #$0400,D4
0000123C  6700 000A                265              BEQ     CODE_MOVEMR
00001240  4EB9 00001CBA            266              JSR     ea_MOVEMwrite
00001246  4E75                     267              RTS
00001248                           268              
00001248  4EB9 00001CA2            269  CODE_MOVEMR JSR     ea_MOVEMread
0000124E  4E75                     270              RTS   
00001250                           271  
00001250  103C 000E                272  NOTCOMMAND  MOVE.B  #14,D0
00001254  43F9 00002ACC            273              LEA     NOT,A1
0000125A  4E4F                     274              TRAP    #15
0000125C  4EB9 0000260A            275              JSR     print_tabs
00001262  4EB9 00002644            276              JSR     p_space4
00001268  4EB9 00001E20            277              JSR     ea_NOT     
0000126E  4E75                     278              RTS          
00001270                           279  
00001270  4EB9 00002572            280  CODE_LEA    JSR     print_LEA
00001276  4EB9 0000260A            281              JSR     print_tabs
0000127C  4EB9 00002644            282              JSR     p_space4
00001282  4EB9 00001BCC            283              JSR     which_way
00001288  BA3C 0000                284              CMP.B   #0,D5
0000128C  6600 0B64                285              BNE     ea_LEA
00001290  3803                     286              MOVE.W  D3,D4           *Move op-code into D4
00001292  C87C 0E00                287              AND.W   #$0E00,D4       *Mask everything except bit 9-11
00001296  E04C                     288              LSR.W   #$8,D4          *Shift bits to the right 9
00001298  E24C                     289              LSR.W   #$1,D4
0000129A  1A04                     290              MOVE.B  D4,D5           *Move data into D5 so that we can call print_dreg
0000129C  4EB9 000026A6            291              JSR     print_A
000012A2  4EB9 000026EC            292              JSR     print_reg
000012A8  4EB9 00002660            293              JSR     print_comma
000012AE  4EB9 00001E28            294              JSR     CHK_MODE0Src
000012B4  4E75                     295              RTS
000012B6                           296  
000012B6                           297  ************************************************************
000012B6                           298  *Subroutine CODE_0110
000012B6                           299  *Narrowed down possibilities for op-code. Now we have to
000012B6                           300  *determine whether op-code is BCC(BGT,BLE,BEQ),BRA
000012B6                           301  ************************************************************  
000012B6                           302  *check for 8 bit displacement         
000012B6  3803                     303  CODE_0110   MOVE.W  D3,D4           *Moves the current OP-Code to D4
000012B8                           304              
000012B8  C87C 0F00                305              AND.W   #$0F00, D4      *Masking to bits 8-11 
000012BC  E04C                     306              LSR.W   #8,D4           *Shift right 8 bits to get the 
000012BE  B87C 0000                307              CMP.W   #%0000,D4       *Checks to see if it is equal to the MOVE command
000012C2  6700 001E                308              BEQ     JSRBRA          *BRANCH IF equal to $0000 = jsrBRA
000012C6  B87C 000E                309              CMP.W   #%1110,D4       *compare for BGT 
000012CA  6700 0036                310              BEQ     JSRBGT          *Branch to sub routine for BGT
000012CE  B87C 000F                311              CMP.W   #%1111,D4       *Compare for BLE
000012D2  6700 004E                312              BEQ     JSRBLE          *branch to sub routine for BLE
000012D6  B87C 0007                313              CMP.W   #%0111,D4       *compare for BEQ
000012DA  6700 0066                314              BEQ     JSRBEQ          *Branch to sub routine BEQ
000012DE  6000 1498                315              BRA     print_data
000012E2                           316  
000012E2                           317  
000012E2                           318  
000012E2  103C 000E                319  JSRBRA      MOVE.B  #14,D0
000012E6  43F9 00002AB7            320              LEA     BRA,A1          *prints Branch command to console
000012EC  4E4F                     321              TRAP    #15             *Print to console
000012EE  4EB9 0000260A            322              JSR     print_tabs
000012F4  4EB9 00002644            323              JSR     p_space4
000012FA  4EB9 00001C56            324              JSR     ea_BCC
00001300  4E75                     325              RTS
00001302                           326              
00001302  103C 000E                327  JSRBGT      MOVE.B  #14,D0
00001306  43F9 00002ABB            328              LEA     BGT,A1          *prints Branch Greater Than command to console
0000130C  4E4F                     329              TRAP    #15             *Print to console
0000130E  4EB9 0000260A            330              JSR     print_tabs
00001314  4EB9 00002644            331              JSR     p_space4
0000131A  4EB9 00001C56            332              JSR     ea_BCC
00001320  4E75                     333              RTS
00001322                           334              
00001322  103C 000E                335  JSRBLE      MOVE.B  #14,D0
00001326  43F9 00002ABF            336              LEA     BLE,A1          *prints Branch Less Than command to console
0000132C  4E4F                     337              TRAP    #15             *Print to console
0000132E  4EB9 0000260A            338              JSR     print_tabs
00001334  4EB9 00002644            339              JSR     p_space4
0000133A  4EB9 00001C56            340              JSR     ea_BCC
00001340  4E75                     341              RTS
00001342                           342  
00001342  103C 000E                343  JSRBEQ      MOVE.B  #14,D0
00001346  43F9 00002AC3            344              LEA     BEQ,A1          *prints Branch Equal to console
0000134C  4E4F                     345              TRAP    #15             *Print to console
0000134E  4EB9 0000260A            346              JSR     print_tabs
00001354  4EB9 00002644            347              JSR     p_space4
0000135A  4EB9 00001C56            348              JSR     ea_BCC
00001360  4E75                     349              RTS
00001362                           350  
00001362                           351  
00001362                           352  
00001362                           353  
00001362                           354  
00001362                           355  ************************************************************
00001362                           356  *Subroutine CODE_0111
00001362                           357  *
00001362                           358  ************************************************************            
00001362                           359  CODE_0111   *Implement code for 0111
00001362                           360  
00001362                           361  
00001362                           362  
00001362                           363  
00001362                           364  ************************************************************
00001362                           365  *Subroutine CODE_0111
00001362                           366  *
00001362                           367  ************************************************************            
00001362                           368  CODE_0111   *Implement code for 0110
00001362                           369  
00001362                           370  
00001362                           371  ************************************************************
00001362                           372  *Subroutine CODE_1001
00001362                           373  *
00001362                           374  ************************************************************            
00001362                           375  CODE_1001   *Implement code for 1001
00001362                           376  
00001362                           377  
00001362                           378  
00001362                           379  ************************************************************
00001362                           380  *Subroutine CODE_1110
00001362                           381  *This code is a little trickier because 4 commands start with
00001362                           382  *1110, and those are ROL,ROR,LSL,LSR. We have to check some
00001362                           383  *the other bits in the instruction to find out exactly which
00001362                           384  ************************************************************            
00001362  3803                     385  CODE_1110   MOVE.W  D3,D4       *Move op-code into D4
00001364  C87C 00C0                386              AND.W   #$00C0,D4   *Mask everything except bit 7 and 6
00001368  EC4C                     387              LSR.W   #$6,D4
0000136A  B83C 0003                388              CMP.B   #%0011,D4
0000136E  6700 0546                389              BEQ     SHIFT_EA
00001372  6000 01A4                390              BRA     SHIFTCode
00001376                           391  
00001376                           392  
00001376                           393  
00001376                           394  ************************************************************
00001376                           395  *Subroutine CODE_1100
00001376                           396  *
00001376                           397  ************************************************************            
00001376                           398  CODE_1100   *Implement code for 1100
00001376                           399  
00001376                           400  
00001376                           401  
00001376                           402  
00001376                           403  ************************************************************
00001376                           404  *Subroutine CODE_1101
00001376                           405  *
00001376                           406  ************************************************************            
00001376                           407  CODE_1101   *Implement code for 1101
00001376                           408  
00001376                           409  *-----------------------------------------------------------------------------------------------------------------
00001376                           410  *Sub-section: Op-code
00001376                           411  *In this section is all of the code that either is getting very close to knowing
00001376                           412  *op-code or knowing exactly which op-code we are dealing with
00001376                           413  *-----------------------------------------------------------------------------------------------------------------
00001376                           414             
00001376                           415  ************************************************************
00001376                           416  *Subroutine MOVEXCode
00001376                           417  *Disassemble further to find out if we have a MOVE op-code
00001376                           418  *or a MOVEA
00001376                           419  ************************************************************             
00001376  3803                     420  MOVEXCode   MOVE.W  D3,D4           *Moves the current OP-Code to D4
00001378  C87C C000                421              AND.W   #$C000,D4       *Masks all but the first 2 bits of the word in D4
0000137C  B87C 0000                422              CMP.W   #$0000,D4       *Checks to see if it is equal to the MOVE command            
00001380  3803                     423              MOVE.W  D3,D4           *Move the current OP-Code to D4
00001382                           424              
00001382                           425  ************************************************************
00001382                           426  *Subroutine MOVEACode
00001382                           427  *
00001382                           428  ************************************************************  
00001382  C87C 01C0                429  MOVEACode   AND.W   #$01C0,D4       *Mask all bits except 8,7, and 6 (Destination mode portion)
00001386  B87C 0040                430              CMP.W   #$0040,D4       *Check to see if it is equal to %0000000001000000
0000138A  6600 000C                431              BNE     MOVECode        *If not equal, than it is a MOVE command, branch to MOVECode
0000138E  4EB9 000024E6            432              JSR     print_MOVEA     *Subroutine called to print MOVEA
00001394  6000 0008                433              BRA     MOVESize        *Branch to MOVESize (skips the call to print MOVE)
00001398                           434  ************************************************************
00001398                           435  *Subroutine MOVECode
00001398                           436  *
00001398                           437  ************************************************************  
00001398  4EB9 000024DC            438  MOVECode    JSR     print_MOVE      *Subroutine called to print MOVE
0000139E                           439  ************************************************************
0000139E                           440  *Subroutine MOVESize
0000139E                           441  *Finds our which size our move is using
0000139E                           442  ************************************************************  
0000139E  4EB9 00001A50            443  MOVESize    JSR     find_size       *Subroutine called to determine size and print to screen (.B,.W,or.L)
000013A4  4EB9 0000260A            444              JSR     print_tabs      *Subroutine to print out two tabs
000013AA  4EB9 00001BE8            445              JSR     ea_MOVE         *Subroutine called to print out the Effective Addresses used in MOVE
000013B0  4E75                     446              RTS                     *Return to where function was called
000013B2                           447  
000013B2                           448  
000013B2                           449  ************************************************************
000013B2                           450  *Subroutine ADDX
000013B2                           451  *Disassemble further to find out if we have an ADD or ADDA op-code
000013B2                           452  ************************************************************                       
000013B2  3803                     453  ADDXCode    MOVE.W  D3,D4           *Moves the current OP-Code to D4
000013B4  C87C 01C0                454              AND.W   #$01C0,D4       *Mask everything except bits 6-8
000013B8  EC4C                     455              LSR.W   #$6,D4          *Logic shift right 6 spots
000013BA  B83C 0007                456              CMP.B   #%0111,D4       *Check OPmode for ADD/ADDA
000013BE  6700 00A0                457              BEQ     ADDACode        *0111 and 0011 means it is ADDA
000013C2  B83C 0003                458              CMP.B   #%0011,D4       
000013C6  6700 0098                459              BEQ     ADDACode
000013CA  6000 0002                460              BRA     ADDCode
000013CE                           461  
000013CE                           462  ************************************************************
000013CE                           463  *Subroutine ADDCode
000013CE                           464  *Description: We know our op-code is ADD. The following code
000013CE                           465  *is now to get the correct data from our op-code and
000013CE                           466  *print out it's exact translation from machine code
000013CE                           467  ************************************************************                      
000013CE  4EB9 000024F0            468  ADDCode     JSR     print_ADD       *Print our ADD outad
000013D4  4EB9 00001BCC            469              JSR     which_way       *Check if destination is EA or Data reg
000013DA  BA3C 0000                470              CMP.B   #0,D5
000013DE  6600 0040                471              BNE     ADD_EA          *Destination will be an EA
000013E2  3803                     472              MOVE.W  D3,D4           *Move op-code into D4 to manipulate
000013E4  C87C 01C0                473              AND.W   #$01C0,D4       *Mask all bits except bit 6,7,8
000013E8  EC4C                     474              LSR.W   #$6,D4          *Shift 6 bits to the right so we can read that opmode size
000013EA  4EB9 00001AEA            475              JSR     find_sz2        *Find size for ADD, read find_sz2 for details
000013F0  4EB9 0000260A            476              JSR     print_tabs
000013F6  4EB9 00002628            477              JSR     p_space2
000013FC  4EB9 00001CD8            478              JSR     ea_ADD          *Print out EA
00001402  4EB9 00002660            479              JSR     print_comma
00001408  3A03                     480              MOVE.W  D3,D5           *Move fresh copy to D5
0000140A  CA7C 0E00                481              AND.W   #$0E00,D5       *Mask all except bit 9-11
0000140E  E04D                     482              LSR.W   #$8,D5          *Shift right 9
00001410  E24D                     483              LSR.W   #$1,D5
00001412  4EB9 00002698            484              JSR     print_D
00001418  4EB9 000026EC            485              JSR     print_reg      *Print which data reg it is
0000141E  4E75                     486              RTS
00001420                           487  
00001420  3803                     488  ADD_EA      MOVE.W  D3,D4           *Move op-code into D4 to manipulate
00001422  C87C 01C0                489              AND.W   #$01C0,D4       *Mask all bits except bit 6,7,8
00001426  EC4C                     490              LSR.W   #$6,D4          *Shift 6 bits to the right so we can read that opmode size
00001428  4EB9 00001B30            491              JSR     find_sz3        *Find size for ADD, read find_sz2 for details
0000142E  4EB9 0000260A            492              JSR     print_tabs
00001434  4EB9 00002628            493              JSR     p_space2
0000143A                           494              
0000143A  3803                     495              MOVE.W  D3,D4           *Move op-code into D4
0000143C  C87C 0E00                496              AND.W   #$0E00,D4       *Mask everything except bit 9-11
00001440  E04C                     497              LSR.W   #$8,D4          *Shift bits to the right 9
00001442  E24C                     498              LSR.W   #$1,D4
00001444  1A04                     499              MOVE.B  D4,D5           *Move data into D5 so that we can call print_dreg
00001446  4EB9 00002698            500              JSR     print_D
0000144C  4EB9 000026EC            501              JSR     print_reg
00001452  4EB9 00002660            502              JSR     print_comma
00001458  4EB9 00001CD8            503              JSR     ea_ADD
0000145E                           504  
0000145E  4E75                     505              RTS
00001460                           506  
00001460                           507  ************************************************************
00001460                           508  *Subroutine ADDACode
00001460                           509  *Description: We know our op-code is ADDA. The following code
00001460                           510  *is now to get the correct data from our op-code and
00001460                           511  *print out it's exact translation from machine code
00001460                           512  ************************************************************    
00001460  4EB9 000024FA            513  ADDACode    JSR     print_ADDA
00001466  3803                     514              MOVE.W  D3,D4           *Move op-code into D4 to manipulate
00001468  C87C 01C0                515              AND.W   #$01C0,D4       *Mask all bits except bit 6,7,8
0000146C  EC4C                     516              LSR.W   #$6,D4          *Shift 6 bits to the right so we can read that opmode size
0000146E  4EB9 00001ABA            517              JSR     find_sz1        *Find size for ADDA, read find_sz1 for details
00001474  4EB9 0000260A            518              JSR     print_tabs  
0000147A  4EB9 0000261A            519              JSR     p_space1    
00001480  4EB9 00001CE0            520              JSR     ea_ADDA         *Print out the EA, does do ADDI stuff
00001486  4EB9 00002660            521              JSR     print_comma
0000148C  3A03                     522              MOVE.W  D3,D5           *fresh copy into D5
0000148E  CA7C 0E00                523              AND.W   #$0E00,D5       *Mask everything except bits 9-11
00001492  E04D                     524              LSR.W   #$8,D5          *Shift right 9 bits
00001494  E24D                     525              LSR.W   #$1,D5
00001496  4EB9 000026A6            526              JSR     print_A
0000149C  4EB9 000026EC            527              JSR     print_reg      *Print out which address reg it is
000014A2  4E75                     528              RTS
000014A4                           529  
000014A4                           530  
000014A4                           531  ************************************************************
000014A4                           532  *Subroutine ANDCode
000014A4                           533  *Description: We know our op-code is AND. The following code
000014A4                           534  *will now set up our printing to the screen
000014A4                           535  ************************************************************            
000014A4  4EB9 00002504            536  ANDCode     JSR     print_AND       *print AND to screen
000014AA  4EB9 00001BCC            537              JSR     which_way       *Find out whats source whats destination
000014B0  BA3C 0001                538              CMP.B   #1,D5           *If 1, Destination is EA
000014B4  6700 0024                539              BEQ     AND_EA          *If 0, Destination is Data reg
000014B8  3803                     540              MOVE.W  D3,D4           *Move op-code into D4
000014BA  C87C 01C0                541              AND.W   #$01C0,D4       *Mask everything except bit 6-8
000014BE                           542              
000014BE  EC4C                     543              LSR.W   #$6,D4          *Shift it to the right 6 bits
000014C0  4EB9 00001AEA            544              JSR     find_sz2        *op-mode follows sz2 format, we use sz2 to find size
000014C6  4EB9 0000260A            545              JSR     print_tabs
000014CC  4EB9 00002628            546              JSR     p_space2
000014D2  4EB9 00001CF0            547              JSR     ea_AND_Srce     *EA is the source, print it
000014D8  4E75                     548              RTS
000014DA                           549              
000014DA                           550              
000014DA  3803                     551  AND_EA      MOVE.W  D3,D4           *Move op-code into D4
000014DC  C87C 01C0                552              AND.W   #$01C0,D4       *Mask everything except bit 6-8
000014E0  EC4C                     553              LSR.W   #$6,D4          *Shift it to the right 6 bits
000014E2  4EB9 00001B30            554              JSR     find_sz3        *op-mode follows sz3 format, we use sz3 to find size
000014E8  4EB9 0000260A            555              JSR     print_tabs
000014EE  4EB9 00002628            556              JSR     p_space2
000014F4                           557              
000014F4  3A03                     558              MOVE.W  D3,D5           *Move op-code into D5
000014F6  CA7C 0E00                559              AND.W   #$0E00,D5       *Mask everything except bit 9-11
000014FA  E04D                     560              LSR.W   #$8,D5          *Shifts bit 9 to the right
000014FC  E24D                     561              LSR.W   #$1,D5
000014FE  4EB9 00002698            562              JSR     print_D
00001504  4EB9 000026EC            563              JSR     print_reg      *Print which data reg it is
0000150A  4EB9 00002660            564              JSR     print_comma
00001510  4EB9 00001CE8            565              JSR     ea_AND_Dest     *EA is the destination, print it
00001516  4E75                     566              RTS
00001518                           567  
00001518                           568  ************************************************************
00001518                           569  *Subroutine SHIFTCode
00001518                           570  *Description:At this point we know there's no EA involved in our instruction
00001518                           571  *We will only be shifting a data register. We still need to figure
00001518                           572  *out if this is a form of ROL,ROR command or a LSR,LSL command
00001518                           573  ************************************************************            
00001518  3803                     574  SHIFTCode   MOVE.W  D3,D4           *Move fresh copy of op-code into D4
0000151A  C87C 0018                575              AND.W   #$0018,D4       *Mask everything except bits 3 and 4
0000151E  E64C                     576              LSR.W   #$3,D4          *Shift over 3 bits
00001520  B83C 0003                577              CMP.B   #%0011,D4       *Compare to %0011
00001524  6700 0016                578              BEQ     ROXCode         *0011 will be a ROX command
00001528  B83C 0001                579              CMP.B   #%0001,D4       *0001 will be an LSX command
0000152C  6700 013A                580              BEQ     LSXCode
00001530  B83C 0000                581              CMP.B   #%0000,D4       *0000 will be an ASX command
00001534  6700 025A                582              BEQ     ASXCode
00001538  6000 123E                583              BRA     print_data
0000153C                           584  
0000153C                           585  
0000153C                           586  ************************************************************
0000153C                           587  *Subroutine ROXCode
0000153C                           588  *Description:We know it's either ROL,ROR at this point. We just need to check
0000153C                           589  *one more bit. This operation is being done on a data reg.
0000153C                           590  ************************************************************            
0000153C  3803                     591  ROXCode     MOVE.W  D3,D4           *Move fresh copy of op-code into D4
0000153E  C87C 0100                592              AND.W   #$0100,D4       *Mask everything except bit 8
00001542  E04C                     593              LSR.W   #$8,D4          *Shift over 8 bits
00001544  B83C 0000                594              CMP.B   #0,D4           *Compare to 0
00001548  6700 000A                595              BEQ     RORCode         *0 is RIGHT ROTATE
0000154C  B83C 0001                596              CMP.B   #1,D4           
00001550  6000 008C                597              BRA     ROLCode         *1 is LEFT ROTATE
00001554                           598  
00001554                           599  ************************************************************
00001554                           600  *Subroutine RORCode
00001554                           601  *Description:FINALLY we know it's a ROR command op-code. The following
00001554                           602  *code will print everything we have and know to the screen
00001554                           603  ************************************************************            
00001554  4EB9 00002518            604  RORCode     JSR     print_ror       *Print ror
0000155A  4EB9 00001B76            605              JSR     find_sz4        *Find the size for our operation
00001560  4EB9 0000260A            606              JSR     print_tabs      *print our tabs
00001566  4EB9 00002628            607              JSR     p_space2
0000156C  3803                     608              MOVE.W  D3,D4           *Move fresh copy of op code
0000156E  C87C 0020                609              AND.W   #$0020,D4       *Mask all bits except bit 5
00001572  EA4C                     610              LSR.W   #$5,D4          *Shift 5 bits right
00001574  B83C 0001                611              CMP.B   #1,D4           *Is it equal to 1?
00001578  6700 0034                612              BEQ     ROR_REG         *Amount to roatte is from register 
0000157C  4EB9 0000267C            613              JSR     print_immed  
00001582  3803                     614              MOVE.W  D3,D4           *Fresh copy of op-code
00001584  C87C 0E00                615              AND.W   #$0E00,D4       *Mask everything except bits 9-11
00001588  E04C                     616              LSR.W   #$8,D4          *Shifts 9 bits right
0000158A  E24C                     617              LSR.W   #$1,D4            
0000158C  2204                     618              MOVE.L  D4,D1           *Move number to D1 to print
0000158E  103C 0003                619              MOVE.B  #3,D0
00001592  4E4F                     620              TRAP    #15             *Print number
00001594  4EB9 00002660            621              JSR     print_comma     *Print comma       
0000159A  3A03                     622              MOVE.W  D3,D5           *Move fresh copy op-code to D5
0000159C  CA7C 0007                623              AND.W   #$0007,D5       *Find which register it is
000015A0  4EB9 00002698            624              JSR     print_D
000015A6  4EB9 000026EC            625              JSR     print_reg      *Print the register
000015AC  4E75                     626              RTS
000015AE                           627              
000015AE  3A03                     628  ROR_REG     MOVE.W  D3,D5           *Move fresh copy of D3 to D5
000015B0  CA7C 0E00                629              AND.W   #$0E00,D5       *Mask everything except bits 9-11
000015B4  E04D                     630              LSR.W   #$8,D5          *Shift right 9 bits
000015B6  E24D                     631              LSR.W   #$1,D5
000015B8  4EB9 00002698            632              JSR     print_D
000015BE  4EB9 000026EC            633              JSR     print_reg      *print which reg it is      
000015C4  4EB9 00002660            634              JSR     print_comma            
000015CA  3A03                     635              MOVE.W  D3,D5           *Fresh copy of op-code
000015CC  CA7C 0007                636              AND.W   #$0007,D5
000015D0  4EB9 00002698            637              JSR     print_D
000015D6  4EB9 000026EC            638              JSR     print_reg      *Print which register it is
000015DC  4E75                     639              RTS
000015DE                           640                
000015DE                           641  
000015DE                           642  ************************************************************
000015DE                           643  *Subroutine ROLCode
000015DE                           644  *Description:FINALLY we know it's a ROL command op-code. The following
000015DE                           645  *code will print everything we have and know to the screen
000015DE                           646  ************************************************************            
000015DE  4EB9 0000250E            647  ROLCode     JSR     print_rol       *Print ror
000015E4  4EB9 00001B76            648              JSR     find_sz4        *Find the size for our operation
000015EA  4EB9 0000260A            649              JSR     print_tabs      *print our tabs
000015F0  4EB9 00002628            650              JSR     p_space2
000015F6  3803                     651              MOVE.W  D3,D4           *Move fresh copy of op code
000015F8  C87C 0020                652              AND.W   #$0020,D4       *Mask all bits except bit 5
000015FC  EA4C                     653              LSR.W   #$5,D4          *Shift 5 bits right
000015FE  B83C 0001                654              CMP.B   #1,D4           *Is it equal to 1?
00001602  6700 0034                655              BEQ     ROL_REG         *Amount to roatte is from register   
00001606  4EB9 0000267C            656              JSR     print_immed
0000160C  3803                     657              MOVE.W  D3,D4           *Fresh copy of op-code
0000160E  C87C 0E00                658              AND.W   #$0E00,D4       *Mask everything except bits 9-11
00001612  E04C                     659              LSR.W   #$8,D4          *Shifts 9 bits right
00001614  E24C                     660              LSR.W   #$1,D4            
00001616  2204                     661              MOVE.L  D4,D1           *Move number to D1 to print
00001618  103C 0003                662              MOVE.B  #3,D0
0000161C  4E4F                     663              TRAP    #15             *Print number
0000161E  4EB9 00002660            664              JSR     print_comma     *Print comma       
00001624  3A03                     665              MOVE.W  D3,D5           *Move fresh copy op-code to D5
00001626  CA7C 0007                666              AND.W   #$0007,D5       *Find which register it is
0000162A  4EB9 00002698            667              JSR     print_D
00001630  4EB9 000026EC            668              JSR     print_reg      *Print the register
00001636  4E75                     669              RTS
00001638                           670              
00001638  3A03                     671  ROL_REG     MOVE.W  D3,D5           *Move fresh copy of D3 to D5
0000163A  CA7C 0E00                672              AND.W   #$0E00,D5       *Mask everything except bits 9-11
0000163E  E04D                     673              LSR.W   #$8,D5          *Shift right 9 bits
00001640  E24D                     674              LSR.W   #$1,D5
00001642  4EB9 00002698            675              JSR     print_D
00001648  4EB9 000026EC            676              JSR     print_reg      *print which reg it is      
0000164E  4EB9 00002660            677              JSR     print_comma            
00001654  3A03                     678              MOVE.W  D3,D5           *Fresh copy of op-code
00001656  CA7C 0007                679              AND.W   #$0007,D5
0000165A  4EB9 00002698            680              JSR     print_D
00001660  4EB9 000026EC            681              JSR     print_reg      *Print which register it is
00001666  4E75                     682              RTS
00001668                           683  
00001668                           684  ************************************************************
00001668                           685  *Subroutine LSXCode
00001668                           686  *Description: We know it's either LSR,LSL at this point. We know the operation
00001668                           687  *is being performed on a data register.
00001668                           688  ************************************************************            
00001668  3803                     689  LSXCode     MOVE.W  D3,D4           *Move fresh copy of op-code into D4
0000166A  C87C 0100                690              AND.W   #$0100,D4       *Mask everything except bit 8
0000166E  E04C                     691              LSR.W   #$8,D4          *Shift over 8 bits
00001670  B83C 0000                692              CMP.B   #0,D4           *Compare to 0
00001674  6700 0090                693              BEQ     LSRCode         *0 is LSR
00001678  6000 0002                694              BRA     LSLCode         *1 is LSL
0000167C                           695              
0000167C                           696   
0000167C                           697  ************************************************************
0000167C                           698  *Subroutine LSLCode
0000167C                           699  *Description: Finally we know it's LSL. The following code
0000167C                           700  *Will be to print what we have to the screen
0000167C                           701  ************************************************************            
0000167C  4EB9 0000252C            702  LSLCode     JSR     print_LSL       *Print ror
00001682  4EB9 00001B76            703              JSR     find_sz4        *Find the size for our operation
00001688  4EB9 0000260A            704              JSR     print_tabs      *print our tabs
0000168E  4EB9 00002628            705              JSR     p_space2
00001694  3803                     706              MOVE.W  D3,D4           *Move fresh copy of op code
00001696  C87C 0020                707              AND.W   #$0020,D4       *Mask all bits except bit 5
0000169A  EA4C                     708              LSR.W   #$5,D4          *Shift 5 bits right
0000169C  B83C 0001                709              CMP.B   #1,D4           *Is it equal to 1?
000016A0  6700 0034                710              BEQ     LSL_REG         *Amount to roatte is from register   
000016A4  4EB9 0000267C            711              JSR     print_immed
000016AA  3803                     712              MOVE.W  D3,D4           *Fresh copy of op-code
000016AC  C87C 0E00                713              AND.W   #$0E00,D4       *Mask everything except bits 9-11
000016B0  E04C                     714              LSR.W   #$8,D4          *Shifts 9 bits right
000016B2  E24C                     715              LSR.W   #$1,D4            
000016B4  2204                     716              MOVE.L  D4,D1           *Move number to D1 to print
000016B6  103C 0003                717              MOVE.B  #3,D0
000016BA  4E4F                     718              TRAP    #15             *Print number
000016BC  4EB9 00002660            719              JSR     print_comma     *Print comma       
000016C2  3A03                     720              MOVE.W  D3,D5           *Move fresh copy op-code to D5
000016C4  CA7C 0007                721              AND.W   #$0007,D5       *Find which register it is
000016C8  4EB9 00002698            722              JSR     print_D
000016CE  4EB9 000026EC            723              JSR     print_reg      *Print the register
000016D4  4E75                     724              RTS
000016D6                           725              
000016D6  3A03                     726  LSL_REG     MOVE.W  D3,D5           *Move fresh copy of D3 to D5
000016D8  CA7C 0E00                727              AND.W   #$0E00,D5       *Mask everything except bits 9-11
000016DC  E04D                     728              LSR.W   #$8,D5          *Shift right 9 bits
000016DE  E24D                     729              LSR.W   #$1,D5
000016E0  4EB9 00002698            730              JSR     print_D
000016E6  4EB9 000026EC            731              JSR     print_reg      *print which reg it is      
000016EC  4EB9 00002660            732              JSR     print_comma            
000016F2  3A03                     733              MOVE.W  D3,D5           *Fresh copy of op-code
000016F4  CA7C 0007                734              AND.W   #$0007,D5
000016F8  4EB9 00002698            735              JSR     print_D
000016FE  4EB9 000026EC            736              JSR     print_reg      *Print which register it is
00001704  4E75                     737              RTS
00001706                           738                
00001706                           739               
00001706                           740   
00001706                           741  ************************************************************
00001706                           742  *Subroutine LSRCode
00001706                           743  *Description: Finally we know it's LSR. The following code
00001706                           744  *Will be to print what we have to the screen
00001706                           745  ************************************************************            
00001706  4EB9 00002522            746  LSRCode     JSR     print_LSR       *Print ror
0000170C  4EB9 00001B76            747              JSR     find_sz4        *Find the size for our operation
00001712  4EB9 0000260A            748              JSR     print_tabs      *print our tabs
00001718  4EB9 00002628            749              JSR     p_space2
0000171E  3803                     750              MOVE.W  D3,D4           *Move fresh copy of op code
00001720  C87C 0020                751              AND.W   #$0020,D4       *Mask all bits except bit 5
00001724  EA4C                     752              LSR.W   #$5,D4          *Shift 5 bits right
00001726  B83C 0001                753              CMP.B   #1,D4           *Is it equal to 1?
0000172A  6700 0034                754              BEQ     LSR_REG         *Amount to roatte is from register   
0000172E  4EB9 0000267C            755              JSR     print_immed
00001734  3803                     756              MOVE.W  D3,D4           *Fresh copy of op-code
00001736  C87C 0E00                757              AND.W   #$0E00,D4       *Mask everything except bits 9-11
0000173A  E04C                     758              LSR.W   #$8,D4          *Shifts 9 bits right
0000173C  E24C                     759              LSR.W   #$1,D4            
0000173E  2204                     760              MOVE.L  D4,D1           *Move number to D1 to print
00001740  103C 0003                761              MOVE.B  #3,D0
00001744  4E4F                     762              TRAP    #15             *Print number
00001746  4EB9 00002660            763              JSR     print_comma     *Print comma       
0000174C  3A03                     764              MOVE.W  D3,D5           *Move fresh copy op-code to D5
0000174E  CA7C 0007                765              AND.W   #$0007,D5       *Find which register it is
00001752  4EB9 00002698            766              JSR     print_D
00001758  4EB9 000026EC            767              JSR     print_reg      *Print the register
0000175E  4E75                     768              RTS
00001760                           769              
00001760  3A03                     770  LSR_REG     MOVE.W  D3,D5           *Move fresh copy of D3 to D5
00001762  CA7C 0E00                771              AND.W   #$0E00,D5       *Mask everything except bits 9-11
00001766  E04D                     772              LSR.W   #$8,D5          *Shift right 9 bits
00001768  E24D                     773              LSR.W   #$1,D5
0000176A  4EB9 00002698            774              JSR     print_D
00001770  4EB9 000026EC            775              JSR     print_reg      *print which reg it is      
00001776  4EB9 00002660            776              JSR     print_comma            
0000177C  3A03                     777              MOVE.W  D3,D5           *Fresh copy of op-code
0000177E  CA7C 0007                778              AND.W   #$0007,D5
00001782  4EB9 00002698            779              JSR     print_D
00001788  4EB9 000026EC            780              JSR     print_reg      *Print which register it is
0000178E  4E75                     781              RTS
00001790                           782                
00001790                           783              *Insert error checking
00001790                           784  
00001790                           785  ************************************************************
00001790                           786  *Subroutine ASX
00001790                           787  ************************************************************            
00001790  4EB9 00001BCC            788  ASXCode     JSR     which_way       *Left or right?
00001796  BA3C 0000                789              CMP.B   #0,D5
0000179A  6700 0090                790              BEQ     ASRCode
0000179E  6000 0002                791              BRA     ASLCode
000017A2                           792              
000017A2                           793  ************************************************************
000017A2                           794  *Subroutine ASLCode
000017A2                           795  *Description: 
000017A2                           796  ************************************************************            
000017A2  4EB9 00002540            797  ASLCode     JSR     print_ASL       *Print ror
000017A8  4EB9 00001B76            798              JSR     find_sz4        *Find the size for our operation
000017AE  4EB9 0000260A            799              JSR     print_tabs      *print our tabs
000017B4  4EB9 00002628            800              JSR     p_space2
000017BA  3803                     801              MOVE.W  D3,D4           *Move fresh copy of op code
000017BC  C87C 0020                802              AND.W   #$0020,D4       *Mask all bits except bit 5
000017C0  EA4C                     803              LSR.W   #$5,D4          *Shift 5 bits right
000017C2  B83C 0001                804              CMP.B   #1,D4           *Is it equal to 1?
000017C6  6700 0034                805              BEQ     ASL_REG         *Amount to rotate is from register   
000017CA  4EB9 0000267C            806              JSR     print_immed
000017D0  3803                     807              MOVE.W  D3,D4           *Fresh copy of op-code
000017D2  C87C 0E00                808              AND.W   #$0E00,D4       *Mask everything except bits 9-11
000017D6  E04C                     809              LSR.W   #$8,D4          *Shifts 9 bits right
000017D8  E24C                     810              LSR.W   #$1,D4           
000017DA  2204                     811              MOVE.L  D4,D1           *Move number to D1 to print
000017DC  103C 0003                812              MOVE.B  #3,D0
000017E0  4E4F                     813              TRAP    #15             *Print number
000017E2  4EB9 00002660            814              JSR     print_comma     *Print comma       
000017E8  3A03                     815              MOVE.W  D3,D5           *Move fresh copy op-code to D5
000017EA  CA7C 0007                816              AND.W   #$0007,D5       *Find which register it is
000017EE  4EB9 00002698            817              JSR     print_D
000017F4  4EB9 000026EC            818              JSR     print_reg      *Print the register
000017FA  4E75                     819              RTS
000017FC                           820              
000017FC  3A03                     821  ASL_REG     MOVE.W  D3,D5           *Move fresh copy of D3 to D5
000017FE  CA7C 0E00                822              AND.W   #$0E00,D5       *Mask everything except bits 9-11
00001802  E04D                     823              LSR.W   #$8,D5          *Shift right 9 bits
00001804  E24D                     824              LSR.W   #$1,D5
00001806  4EB9 00002698            825              JSR     print_D
0000180C  4EB9 000026EC            826              JSR     print_reg      *print which reg it is      
00001812  4EB9 00002660            827              JSR     print_comma            
00001818  3A03                     828              MOVE.W  D3,D5           *Fresh copy of op-code
0000181A  CA7C 0007                829              AND.W   #$0007,D5
0000181E  4EB9 00002698            830              JSR     print_D
00001824  4EB9 000026EC            831              JSR     print_reg      *Print which register it is
0000182A  4E75                     832              RTS
0000182C                           833                
0000182C                           834              
0000182C                           835  ************************************************************
0000182C                           836  *Subroutine ASRCode
0000182C                           837  *Description: Finally we know it's LSR. The following code
0000182C                           838  *Will be to print what we have to the screen
0000182C                           839  ************************************************************            
0000182C  4EB9 00002536            840  ASRCode     JSR     print_ASR       *Print ror
00001832  4EB9 00001B76            841              JSR     find_sz4        *Find the size for our operation
00001838  4EB9 0000260A            842              JSR     print_tabs      *print our tabs
0000183E  4EB9 00002628            843              JSR     p_space2
00001844  3803                     844              MOVE.W  D3,D4           *Move fresh copy of op code
00001846  C87C 0020                845              AND.W   #$0020,D4       *Mask all bits except bit 5
0000184A  EA4C                     846              LSR.W   #$5,D4          *Shift 5 bits right
0000184C  B83C 0001                847              CMP.B   #1,D4           *Is it equal to 1?
00001850  6700 0034                848              BEQ     ASR_REG         *Amount to roatte is from register   
00001854  4EB9 0000267C            849              JSR     print_immed
0000185A  3803                     850              MOVE.W  D3,D4           *Fresh copy of op-code
0000185C  C87C 0E00                851              AND.W   #$0E00,D4       *Mask everything except bits 9-11
00001860  E04C                     852              LSR.W   #$8,D4          *Shifts 9 bits right
00001862  E24C                     853              LSR.W   #$1,D4            
00001864  2204                     854              MOVE.L  D4,D1           *Move number to D1 to print
00001866  103C 0003                855              MOVE.B  #3,D0
0000186A  4E4F                     856              TRAP    #15             *Print number
0000186C  4EB9 00002660            857              JSR     print_comma     *Print comma       
00001872  3A03                     858              MOVE.W  D3,D5           *Move fresh copy op-code to D5
00001874  CA7C 0007                859              AND.W   #$0007,D5       *Find which register it is
00001878  4EB9 00002698            860              JSR     print_D
0000187E  4EB9 000026EC            861              JSR     print_reg      *Print the register
00001884  4E75                     862              RTS
00001886                           863              
00001886  3A03                     864  ASR_REG     MOVE.W  D3,D5           *Move fresh copy of D3 to D5
00001888  CA7C 0E00                865              AND.W   #$0E00,D5       *Mask everything except bits 9-11
0000188C  E04D                     866              LSR.W   #$8,D5          *Shift right 9 bits
0000188E  E24D                     867              LSR.W   #$1,D5
00001890  4EB9 00002698            868              JSR     print_D
00001896  4EB9 000026EC            869              JSR     print_reg      *print which reg it is      
0000189C  4EB9 00002660            870              JSR     print_comma            
000018A2  3A03                     871              MOVE.W  D3,D5           *Fresh copy of op-code
000018A4  CA7C 0007                872              AND.W   #$0007,D5
000018A8  4EB9 00002698            873              JSR     print_D
000018AE  4EB9 000026EC            874              JSR     print_reg      *Print which register it is
000018B4  4E75                     875              RTS
000018B6                           876                          
000018B6                           877             
000018B6                           878  ************************************************************
000018B6                           879  *Subroutine SHIFT_EA
000018B6                           880  *Description:Our diassembler has determined that we have
000018B6                           881  *a shifting command but it is being performed on an EA
000018B6                           882  *We still need to figure out which shifting command it is
000018B6                           883  ************************************************************            
000018B6  3803                     884  SHIFT_EA    MOVE.W  D3,D4           *Move fresh copy op-code to D4
000018B8  C87C 0400                885              AND.W   #$0400,D4       *Mask everything except bit 10
000018BC  E04C                     886              LSR.W   #$8,D4          *Shift right 10 bits
000018BE  E44C                     887              LSR.W   #$2,D4
000018C0  B83C 0000                888              CMP.B   #0,D4
000018C4  6700 001A                889              BEQ     AorLSXCode       *If its 0 its an ASX,LSX code
000018C8  6000 0002                890              BRA     ROXEACode       *If its 1 its a ROX code 
000018CC                           891  
000018CC                           892  ************************************************************
000018CC                           893  *Subroutine ROXEACode
000018CC                           894  *Description We know its a ROL,ROR command, now we just need
000018CC                           895  *to figure out which one it is
000018CC                           896  ************************************************************            
000018CC  3803                     897  ROXEACode   MOVE.W  D3,D4           *Move fresh copy of op-code into D4
000018CE  C87C 0100                898              AND.W   #$0100,D4       *Mask everything except bit 8
000018D2  E04C                     899              LSR.W   #$8,D4          *Shift over 8 bits
000018D4  B83C 0000                900              CMP.B   #0,D4           *Compare to 0
000018D8  6700 043C                901              BEQ     ea_ROR          *0 is ROR
000018DC  6000 044C                902              BRA     ea_ROL          *1 is ROL
000018E0                           903              
000018E0                           904  
000018E0                           905  ************************************************************
000018E0                           906  *Subroutine AorLSXCode
000018E0                           907  ************************************************************            
000018E0  3803                     908  AorLSXCode  MOVE.W  D3,D4
000018E2  C87C E2C0                909              AND.W   #%1110001011000000,D4  
000018E6  B87C E2C0                910              CMP.W   #%1110001011000000,D4   *Is is LSX OR ASX
000018EA  6700 0018                911              BEQ     LSXEACode
000018EE  6000 0002                912              BRA     ASXEACode
000018F2                           913              
000018F2                           914  ************************************************************
000018F2                           915  *Subroutine ASXEACode
000018F2                           916  *Description:
000018F2                           917  ************************************************************            
000018F2  4EB9 00001BCC            918  ASXEACode   JSR     which_way       *Left or right?
000018F8  BA3C 0000                919              CMP.B   #0,D5           *0 is right
000018FC  6700 0474                920              BEQ     ea_ASR
00001900  6000 048A                921              BRA     ea_ASL
00001904                           922              
00001904                           923  
00001904                           924  ************************************************************
00001904                           925  *Subroutine LSXEACode
00001904                           926  *Description We know its a LSL,LSR command, now we just need
00001904                           927  *to figure out which one it is
00001904                           928  ************************************************************            
00001904  4EB9 00001BCC            929  LSXEACode   JSR     which_way       *Is it left or right?
0000190A  BA3C 0000                930              CMP.B   #0,D5
0000190E  6700 042E                931              BEQ     ea_LSR          *0 is right
00001912  6000 0444                932              BRA     ea_LSL          *1 is left
00001916                           933              
00001916                           934  
00001916                           935  ************************************************************
00001916                           936  *Subroutine SUBCode
00001916                           937  *We know the instruction is a SUB command
00001916                           938  ************************************************************            
00001916  4EB9 0000255E            939  SUBCode     JSR     print_SUB
0000191C  4EB9 00001B76            940              JSR     find_sz4
00001922  4EB9 0000260A            941              JSR     print_tabs
00001928  4EB9 00002628            942              JSR     p_space2
0000192E  4EB9 00001BCC            943              JSR     which_way
00001934  BA3C 0000                944              CMP.B   #0,D5
00001938  6600 046C                945              BNE     ea_SUB
0000193C  4EB9 00001E28            946              JSR     CHK_MODE0Src
00001942  4EB9 00002660            947              JSR     print_comma
00001948  3803                     948              MOVE.W  D3,D4           *Move op-code into D4
0000194A  C87C 0E00                949              AND.W   #$0E00,D4       *Mask everything except bit 9-11
0000194E  E04C                     950              LSR.W   #$8,D4          *Shift bits to the right 9
00001950  E24C                     951              LSR.W   #$1,D4
00001952  1A04                     952              MOVE.B  D4,D5           *Move data into D5 so that we can call print_dreg
00001954  4EB9 00002698            953              JSR     print_D
0000195A  4EB9 000026EC            954              JSR     print_reg
00001960  4E75                     955              RTS
00001962                           956  
00001962                           957  ************************************************************
00001962                           958  *Subroutine ORCode
00001962                           959  *We know the instruction is an OR command
00001962                           960  ************************************************************            
00001962  4EB9 00002568            961  ORCode     JSR      print_OR
00001968  4EB9 00001B76            962             JSR      find_sz4
0000196E  4EB9 0000260A            963             JSR      print_tabs
00001974  4EB9 00002636            964             JSR      p_space3
0000197A  4EB9 00001BCC            965             JSR     which_way
00001980  BA3C 0000                966             CMP.B   #0,D5
00001984  6600 0446                967             BNE     ea_OR
00001988  4EB9 00001E28            968             JSR     CHK_MODE0Src
0000198E  4EB9 00002660            969             JSR     print_comma
00001994  3803                     970             MOVE.W  D3,D4           *Move op-code into D4
00001996  C87C 0E00                971             AND.W   #$0E00,D4       *Mask everything except bit 9-11
0000199A  E04C                     972             LSR.W   #$8,D4          *Shift bits to the right 9
0000199C  E24C                     973             LSR.W   #$1,D4
0000199E  1A04                     974             MOVE.B  D4,D5           *Move data into D5 so that we can call print_dreg
000019A0  4EB9 00002698            975             JSR     print_D
000019A6  4EB9 000026EC            976             JSR     print_reg
000019AC  4E75                     977             RTS
000019AE                           978  
000019AE                           979  ************************************************************
000019AE                           980  *Subroutine JSRCode
000019AE                           981  *We know the instruction is an JSR command
000019AE                           982  ************************************************************  
000019AE  4EB9 0000257C            983  JSRCode    JSR      print_JSR
000019B4  4EB9 0000260A            984             JSR      print_tabs
000019BA  4EB9 00002644            985             JSR      p_space4
000019C0  4EB9 00001E18            986             JSR      ea_JSR
000019C6  4E75                     987             RTS
000019C8                           988             
000019C8                           989  ************************************************************
000019C8                           990  *Subroutine RTSCode
000019C8                           991  *We know the instruction is an RTS command
000019C8                           992  ************************************************************ 
000019C8  4EB9 00002586            993  RTSCode    JSR      print_RTS
000019CE  4EB9 0000260A            994             JSR      print_tabs
000019D4  4E75                     995             RTS
000019D6                           996  ************************************************************
000019D6                           997  *Subroutine MOVEQ
000019D6                           998  *Descripion: We know that the command is a MOVEQ command
000019D6                           999  ************************************************************            
000019D6  3803                    1000  MOVEQCode   MOVE.W  D3,D4           *Moces the current OP-Code to D4
000019D8  C87C 0100               1001              AND.W   #$0100,D4
000019DC  B87C 0000               1002              CMP.W   #0,D4
000019E0  6600 001C               1003              BNE     not_MOVEQ
000019E4  4EB9 0000254A           1004              JSR     print_MOVEQ
000019EA                          1005              
000019EA  4EB9 0000260A           1006              JSR     print_tabs
000019F0  4EB9 00002628           1007              JSR     p_space2
000019F6  4EB9 00001BFC           1008              JSR     ea_MOVEQ
000019FC  4E75                    1009              RTS
000019FE                          1010  
000019FE                          1011  not_MOVEQ   *Jump to outpirnt of data as this is not a MOVEQ
000019FE  4E75                    1012              RTS
00001A00                          1013  ************************************************************
00001A00                          1014  *Subroutine ADDQ
00001A00                          1015  *Descripion: We know that the command is a ADDQ command
00001A00                          1016  ************************************************************  
00001A00                          1017              
00001A00  103C 000E               1018  ADDQCODE    MOVE.B  #14,D0
00001A04  43F9 00002AC7           1019              LEA     ADDQ,A1         *prints Branch Less Than command to console
00001A0A  4E4F                    1020              TRAP    #15             *Print to console
00001A0C  3803                    1021              MOVE.W  D3,D4           *Moves curent opcode into D4
00001A0E  C87C 00C0               1022              AND.W   #$00C0,D4       *masks all but 6 and 7 bits
00001A12  EC4C                    1023              LSR.W   #6,D4           *Shift right 6 bits to get the  bits
00001A14  4EB9 00001B76           1024              JSR     find_sz4
00001A1A  4EB9 0000260A           1025              JSR     print_tabs
00001A20  4EB9 0000261A           1026              JSR     p_space1
00001A26  4EB9 0000267C           1027              JSR     print_immed
00001A2C                          1028              
00001A2C  3803                    1029              MOVE.W  D3,D4
00001A2E  C87C 0E00               1030              AND.W   #$0E00,D4
00001A32  E04C                    1031              LSR.W   #$8,D4
00001A34  E24C                    1032              LSR.W   #$1,D4
00001A36  2204                    1033              MOVE.L  D4,D1
00001A38  103C 000F               1034              MOVE.B  #15,D0
00001A3C  143C 0010               1035              MOVE.B  #16,D2
00001A40  4E4F                    1036              TRAP    #15
00001A42  4EB9 00002660           1037              JSR     print_comma
00001A48  4EB9 00001F70           1038              JSR     CHK_MODE4
00001A4E  4E75                    1039              RTS
00001A50                          1040  *-----------------------------------------------------------------------------------------------------------------
00001A50                          1041  *Sub-section: find_sizes
00001A50                          1042  *This section groups together all the find_sizes you can use to reuse finding the size of an op-mode
00001A50                          1043  *or any other times you need to find a size. Read description to know which find size you can
00001A50                          1044  *use in your code implementation.
00001A50                          1045  *-----------------------------------------------------------------------------------------------------------------
00001A50                          1046  
00001A50                          1047  ************************************************************
00001A50                          1048  *Subroutine find_size
00001A50                          1049  *Description: Looks at the size of command and loads correct symbol to A4
00001A50                          1050  ************************************************************
00001A50  3803                    1051  find_size   MOVE.W  D3,D4           *Moves the current opcode to D4
00001A52  C87C 3000               1052              AND.W   #$3000,D4       *Masks all but the 12 and 13 bits
00001A56  B87C 1000               1053              CMP.W   #$1000,D4       *Compare them to 01 (byte operation)
00001A5A  6600 0010               1054              BNE     CheckWord       *If not equal, branch to CheckWord
00001A5E  43F9 00002A43           1055              LEA     Byte,A1         *Load byte message to A1
00001A64  1A3C 0001               1056              MOVE.B  #$01,D5
00001A68  6000 015A               1057              BRA     print_size      *Branch to print_size
00001A6C                          1058              
00001A6C  B87C 3000               1059  CheckWord   CMP.W   #$3000,D4       *Compares D4 (word operation)
00001A70  6600 0010               1060              BNE     CheckLong       *If not equal, branch to CheckLong
00001A74  43F9 00002A46           1061              LEA     Word,A1         *Load word message to A1
00001A7A  1A3C 0003               1062              MOVE.B  #$03,D5
00001A7E  6000 0144               1063              BRA     print_size      *Branch to print_size
00001A82                          1064              
00001A82  43F9 00002A49           1065  CheckLong   LEA     Long,A1         *Load long message to A1
00001A88  1A3C 0002               1066              MOVE.B  #$02,D5
00001A8C  6000 0136               1067              BRA     print_size      *Branch to print_size
00001A90                          1068  
00001A90                          1069  ************************************************************
00001A90                          1070  *Subroutine find_sz0
00001A90                          1071  *Description: used to find size of op-mode, or realy any size
00001A90                          1072  *Written for reuasbility. Has to follow 0-word 1-long
00001A90                          1073  *IMPORTANT: MUST format data into D4 before calling this subroutine
00001A90                          1074  ************************************************************
00001A90  3803                    1075  find_sz0    MOVE.W  D3,D4
00001A92  C87C 0040               1076              AND.W   #$0040,D4
00001A96                          1077              
00001A96  B83C 0040               1078              CMP.B   #$0040,D4
00001A9A  6700 0010               1079              BEQ     sz0_long
00001A9E  43F9 00002A46           1080              LEA     Word,A1
00001AA4  1A3C 0003               1081              MOVE.B  #$03,D5
00001AA8  6000 011A               1082              BRA     print_size
00001AAC                          1083              
00001AAC  43F9 00002A49           1084  sz0_long    LEA     Long,A1
00001AB2  1A3C 0002               1085              MOVE.B  #$02,D5
00001AB6  6000 010C               1086              BRA     print_size
00001ABA                          1087  
00001ABA                          1088  ************************************************************
00001ABA                          1089  *Subroutine find_sz1
00001ABA                          1090  *Description: used to find size of op-mode, or realy any size
00001ABA                          1091  *Written for reuasbility. Has to follow 011-word 111-long
00001ABA                          1092  *IMPORTANT: MUST format data into D4 before calling this subroutine
00001ABA                          1093  ************************************************************
00001ABA  B83C 0003               1094  find_sz1    CMP.B   #%0011,D4       *Check if op-mode equal to %0011     
00001ABE  6700 000E               1095              BEQ     sz1_word 
00001AC2  B83C 0007               1096              CMP.B   #%0111,D4
00001AC6  6700 0014               1097              BEQ     sz1_long
00001ACA  6000 0CD2               1098              BRA     bad_instr       *Error op-mode
00001ACE                          1099              
00001ACE  43F9 00002A46           1100  sz1_word    LEA     Word,A1         *Load word message to A1
00001AD4  1A3C 0003               1101              MOVE.B  #$03,D5
00001AD8  6000 00EA               1102              BRA     print_size      *Branch to print_size
00001ADC                          1103              
00001ADC  43F9 00002A49           1104  sz1_long    LEA     Long,A1
00001AE2  1A3C 0002               1105              MOVE.B  #$02,D5
00001AE6  6000 00DC               1106              BRA     print_size      *Branch to print_size
00001AEA                          1107  
00001AEA                          1108  
00001AEA                          1109  ************************************************************
00001AEA                          1110  *Subroutine find_sz2
00001AEA                          1111  *Description: used to find size of op-mode, or realy any size
00001AEA                          1112  *Written for reuasbility. Has to follow 000-byte 001-word 010-long
00001AEA                          1113  *IMPORTANT: MUST format data into D4 before calling this subroutine
00001AEA                          1114  ************************************************************
00001AEA  B83C 0000               1115  find_sz2    CMP.B   #%0000,D4       *Check if op-mode equal to %0011     
00001AEE  6700 0016               1116              BEQ     sz2_byte        *We know it's a byte
00001AF2  B83C 0001               1117              CMP.B   #%0001,D4       *Check if equal to %0001
00001AF6  6700 001C               1118              BEQ     sz2_word        *We know it's a word
00001AFA  B83C 0002               1119              CMP.B   #%0010,D4       *Check if equal to %0010
00001AFE  6700 0022               1120              BEQ     sz2_long        *We know it's a long
00001B02  6000 0C9A               1121              BRA     bad_instr       *Error op-mode
00001B06                          1122              
00001B06  43F9 00002A43           1123  sz2_byte    LEA     Byte,A1         *Load word message to A1
00001B0C  1A3C 0001               1124              MOVE.B  #01,D5
00001B10  6000 00B2               1125              BRA     print_size      *Branch to print_size
00001B14                          1126              
00001B14  43F9 00002A46           1127  sz2_word    LEA     Word,A1         *Load word message to A1
00001B1A  1A3C 0003               1128              MOVE.B  #$03,D5
00001B1E  6000 00A4               1129              BRA     print_size      *Branch to print_size
00001B22                          1130              
00001B22  43F9 00002A49           1131  sz2_long    LEA     Long,A1
00001B28  1A3C 0002               1132              MOVE.B  #$02,D5
00001B2C  6000 0096               1133              BRA     print_size      *Branch to print_size
00001B30                          1134              
00001B30                          1135              
00001B30                          1136  ************************************************************
00001B30                          1137  *Subroutine find_sz3
00001B30                          1138  *Description: used to find size of op-mode, or realy any size
00001B30                          1139  *Written for reuasbility. Has to follow 100-byte 101-word 110-long
00001B30                          1140  *IMPORTANT: MUST format data into D4 before calling this subroutine
00001B30                          1141  ************************************************************
00001B30  B83C 0004               1142  find_sz3    CMP.B   #%0100,D4       *Check if op-mode equal to %0100     
00001B34  6700 0016               1143              BEQ     sz3_byte        *We know it's a byte
00001B38  B83C 0005               1144              CMP.B   #%0101,D4       *Check if equal to %0101
00001B3C  6700 001C               1145              BEQ     sz3_word        *We know it's a word
00001B40  B83C 0006               1146              CMP.B   #%0110,D4       *Check if equal to %0110
00001B44  6700 0022               1147              BEQ     sz3_long        *We know it's a long
00001B48  6000 0C54               1148              BRA     bad_instr       *Error op-mode
00001B4C                          1149              
00001B4C  43F9 00002A43           1150  sz3_byte    LEA     Byte,A1         *Load word message to A1
00001B52  1A3C 0001               1151              MOVE.B  #01,D5
00001B56  6000 006C               1152              BRA     print_size      *Branch to print_size
00001B5A                          1153              
00001B5A  43F9 00002A46           1154  sz3_word    LEA     Word,A1         *Load word message to A1
00001B60  1A3C 0003               1155              MOVE.B  #$03,D5
00001B64  6000 005E               1156              BRA     print_size      *Branch to print_size
00001B68                          1157              
00001B68  43F9 00002A49           1158  sz3_long    LEA     Long,A1
00001B6E  1A3C 0002               1159              MOVE.B  #$02,D5
00001B72  6000 0050               1160              BRA     print_size      *Branch to print_size
00001B76                          1161              
00001B76                          1162   
00001B76                          1163           
00001B76                          1164  ************************************************************
00001B76                          1165  *Subroutine find_sz4
00001B76                          1166  *Description: used to find size of op-mode, or realy any size
00001B76                          1167  *Written for reuasbility. Has to follow 00-byte 01-word 10-long
00001B76                          1168  *Data doesnt not have to be formatted beforehand to use this subroutine
00001B76                          1169  ************************************************************
00001B76  3803                    1170  find_sz4    MOVE.W  D3,D4           *Move fresh copy of op-code into D4
00001B78  C87C 00C0               1171              AND.W   #$00C0,D4       *Mask everything except bits 6 and 7
00001B7C  EC4C                    1172              LSR.W   #$6,D4          *Logic shift right 6 bits
00001B7E  B83C 0000               1173              CMP.B   #%0000,D4       *Check if op-mode equal to %0100     
00001B82  6700 0016               1174              BEQ     sz4_byte        *We know it's a byte
00001B86  B83C 0001               1175              CMP.B   #%0001,D4       *Check if equal to %0101
00001B8A  6700 001C               1176              BEQ     sz4_word        *We know it's a word
00001B8E  B83C 0002               1177              CMP.B   #%0010,D4       *Check if equal to %0110
00001B92  6700 0022               1178              BEQ     sz4_long        *We know it's a long
00001B96  6000 0C06               1179              BRA     bad_instr       *Error op-mode
00001B9A                          1180              
00001B9A  43F9 00002A43           1181  sz4_byte    LEA     Byte,A1         *Load word message to A1
00001BA0  1A3C 0001               1182              MOVE.B  #$01,D5
00001BA4  6000 001E               1183              BRA     print_size      *Branch to print_size
00001BA8                          1184              
00001BA8  43F9 00002A46           1185  sz4_word    LEA     Word,A1         *Load word message to A1
00001BAE  1A3C 0003               1186              MOVE.B  #$03,D5
00001BB2  6000 0010               1187              BRA     print_size      *Branch to print_size
00001BB6                          1188              
00001BB6  43F9 00002A49           1189  sz4_long    LEA     Long,A1
00001BBC  1A3C 0002               1190              MOVE.B  #$02,D5
00001BC0  6000 0002               1191              BRA     print_size      *Branch to print_size
00001BC4                          1192  
00001BC4                          1193     
00001BC4                          1194  ************************************************************
00001BC4                          1195  *Subroutine print_size
00001BC4                          1196  *Description: Prints size of message loaded into A1
00001BC4                          1197  *IMPORTANT: A1 must be pre-loaded with message before calling
00001BC4                          1198  *this sub-routine
00001BC4                          1199  ************************************************************
00001BC4                          1200  
00001BC4  123C 000E               1201  print_size  MOVE.B  #14,D1          *Set TRAP #15 to task 14 (print string)
00001BC8  4E4F                    1202              TRAP    #15             *Print to console
00001BCA  4E75                    1203              RTS
00001BCC                          1204  
00001BCC                          1205  ************************************************************
00001BCC                          1206  *Subroutine which_way
00001BCC                          1207  *Description: Determines which is the source and which is
00001BCC                          1208  *the destination between the DN and the EA
00001BCC                          1209  *IMPORTANT: must be used where data reg or address reg is 
00001BCC                          1210  *inherently part of the instruction format
00001BCC                          1211  *IMPORTANT: must be used where bit 8 is the direction decider
00001BCC                          1212  *D5 is used to store outcome: 0:Destination is DATAREG
00001BCC                          1213  *                             1:Destination is EA
00001BCC                          1214  ************************************************************               
00001BCC  3803                    1215  which_way   MOVE.W  D3,D4           *Move op-code into D4
00001BCE  C87C 0100               1216              AND.W   #$0100,D4       *Mask everything except bit 8
00001BD2  E04C                    1217              LSR.W   #$8,D4          *shift 8 bits to the right
00001BD4  B83C 0000               1218              CMP.B   #0,D4           *Is it a 0?
00001BD8  6600 0008               1219              BNE     store_one       *If it's not destination is EA
00001BDC  1A3C 0000               1220              MOVE.B  #0,D5           *If it's 0 destination is DATAREG
00001BE0  4E75                    1221              RTS
00001BE2                          1222              
00001BE2  1A3C 0001               1223  store_one   MOVE.B  #1,D5
00001BE6  4E75                    1224              RTS
00001BE8                          1225  
00001BE8                          1226  
00001BE8                          1227                 
00001BE8                          1228  *-----------------------------------------------------------------------------------------------------------------
00001BE8                          1229  *           EFFECTIVE ADDRESSING SECTION
00001BE8                          1230  *-----------------------------------------------------------------------------------------------------------------
00001BE8                          1231  ************************************************************
00001BE8                          1232  *Subroutine ea_()
00001BE8                          1233  *Description: Determines the effective addresses for a given command
00001BE8                          1234  ************************************************************
00001BE8  4EB9 00001E28           1235  ea_MOVE     JSR     CHK_MODE0Src
00001BEE  4EB9 00002660           1236              JSR     print_comma
00001BF4  4EB9 00001E92           1237              JSR     CHK_MODE0Dest
00001BFA  4E75                    1238              RTS
00001BFC                          1239              
00001BFC  4EB9 0000267C           1240  ea_MOVEQ    JSR     print_immed
00001C02  3203                    1241              MOVE.W  D3,D1
00001C04  C27C 00FF               1242              AND.W   #$00FF,D1
00001C08  143C 0010               1243              MOVE.B  #16,D2
00001C0C  103C 000F               1244              MOVE.B  #15,D0
00001C10  4E4F                    1245              TRAP    #15
00001C12  4EB9 00002660           1246              JSR     print_comma
00001C18  4EB9 00002698           1247              JSR     print_D
00001C1E  143C 0010               1248              MOVE.B  #16,D2
00001C22  103C 000F               1249              MOVE.B  #15,D0
00001C26  3203                    1250              MOVE.W  D3,D1
00001C28  E049                    1251              LSR.W   #8,D1
00001C2A  E249                    1252              LSR.W   #1,D1
00001C2C  C27C 0007               1253              AND.W   #$0007,D1
00001C30  4E4F                    1254              TRAP    #15
00001C32  4E75                    1255              RTS
00001C34                          1256  
00001C34                          1257     
00001C34                          1258   
00001C34  3803                    1259  ea_ADDQ     MOVE.W  D3,D4           *Move opcode to D4
00001C36  C87C 0E00               1260              AND.W   #$0E00,D4       *Mask all bits except the last 6
00001C3A  143C 0010               1261              MOVE.B  #16,D2          *Print immediate ea
00001C3E  103C 000F               1262              MOVE.B  #15,D0
00001C42  4E4F                    1263              TRAP    #15
00001C44  4EB9 00002660           1264              JSR     print_comma
00001C4A  C87C 003F               1265              AND.W   #$003F,D4       *Mask all bits except the last 6
00001C4E  4EB9 00001E92           1266              JSR     CHK_MODE0Dest
00001C54  4E75                    1267              RTS
00001C56                          1268  
00001C56                          1269  
00001C56  3803                    1270  ea_BCC      MOVE.W  D3,D4
00001C58  C87C 00FF               1271              AND.W   #$00FF,D4
00001C5C  B87C 0000               1272              CMP.W   #$0000,D4
00001C60  6700 0016               1273              BEQ     ea_Bcc16
00001C64  B87C 00FF               1274              CMP.W   #$00FF,D4
00001C68  6700 0018               1275              BEQ     ea_Bcc32
00001C6C  2A48                    1276              MOVEA.L A0,A5
00001C6E  2A0D                    1277              MOVE.L  A5,D5
00001C70  DA04                    1278              ADD.B  D4,D5
00001C72  2A45                    1279              MOVEA.L D5,A5
00001C74  6000 0016               1280              BRA     print_BccEA
00001C78                          1281  
00001C78  3818                    1282  ea_Bcc16    MOVE.W  (A0)+,D4
00001C7A  2A48                    1283              MOVEA.L A0,A5
00001C7C  DAC4                    1284              ADDA.W  D4,A5
00001C7E  6000 000C               1285              BRA     print_BccEA
00001C82                          1286  
00001C82  2818                    1287  ea_Bcc32    MOVE.L  (A0)+,D4
00001C84  2A48                    1288              MOVEA.L A0,A5
00001C86  DBC4                    1289              ADDA.L  D4,A5
00001C88  6000 0002               1290              BRA     print_BccEA
00001C8C                          1291  
00001C8C  4EB9 0000268A           1292  print_BccEA JSR     print_absolute
00001C92                          1293  
00001C92  220D                    1294              MOVE.L  A5,D1
00001C94  143C 0010               1295              MOVE.B  #16, D2
00001C98  103C 000F               1296              MOVE.B  #15,D0
00001C9C  4E4F                    1297              TRAP    #15
00001C9E  4285                    1298              CLR.L   D5
00001CA0  4E75                    1299              RTS
00001CA2                          1300  
00001CA2                          1301  
00001CA2  3803                    1302  ea_MOVEMread    MOVE.W  D3,D4
00001CA4  4EB9 00001E64           1303              JSR     CHK_MOVEM
00001CAA  4EB9 00002660           1304              JSR     print_comma
00001CB0  3618                    1305              MOVE.W  (A0)+,D3
00001CB2  4EB9 00002192           1306              JSR     MOVEM_READ
00001CB8  4E75                    1307              RTS
00001CBA                          1308                  
00001CBA  3448                    1309  ea_MOVEMwrite   MOVEA.W A0,A2
00001CBC  554A                    1310              SUBA.W  #$2,A2
00001CBE  3618                    1311              MOVE.W  (A0)+,D3
00001CC0  4EB9 000021BC           1312              JSR     MOVEM_WRITE
00001CC6  4EB9 00002660           1313              JSR     print_comma
00001CCC  3612                    1314              MOVE.W  (A2),D3
00001CCE  3803                    1315              MOVE.W  D3,D4
00001CD0  4EB9 00001E64           1316              JSR     CHK_MOVEM
00001CD6  4E75                    1317              RTS
00001CD8                          1318  
00001CD8  4EB9 00001E28           1319  ea_ADD      JSR     CHK_MODE0Src    *Sees which EAs to check
00001CDE  4E75                    1320              RTS
00001CE0                          1321  
00001CE0  4EB9 00001E28           1322  ea_ADDA     JSR     CHK_MODE0Src    *Sees which EAs to check
00001CE6  4E75                    1323              RTS
00001CE8                          1324  
00001CE8  4EB9 00001ECE           1325  ea_AND_Dest JSR     CHK_MODE1       *Sees which EAs to check
00001CEE  4E75                    1326              RTS
00001CF0                          1327  
00001CF0  4EB9 00001F02           1328  ea_AND_Srce JSR     CHK_MODE2       *Sees which EAs to check
00001CF6  4EB9 00002660           1329              JSR     print_comma
00001CFC  3803                    1330              MOVE.W  D3,D4           *Move op-code into D4
00001CFE  C87C 0E00               1331              AND.W   #$0E00,D4       *Mask everything except bit 9-11
00001D02  E04C                    1332              LSR.W   #$8,D4          *Shifts bit 9 to the right
00001D04  E24C                    1333              LSR.W   #$1,D4
00001D06  1A04                    1334              MOVE.B  D4,D5           *Move data to D5 so we can call print_dreg
00001D08  4EB9 00002698           1335              JSR     print_D
00001D0E  4EB9 000026EC           1336              JSR     print_reg
00001D14  4E75                    1337              RTS
00001D16                          1338  
00001D16  4EB9 00002518           1339  ea_ROR      JSR     print_ROR
00001D1C  4EB9 0000260A           1340              JSR     print_tabs
00001D22  4EB9 00001F36           1341              JSR     CHK_MODE3       *Sees which EAs to check
00001D28  4E75                    1342              RTS
00001D2A                          1343              
00001D2A  4EB9 0000250E           1344  ea_ROL      JSR     print_ROL
00001D30  4EB9 0000260A           1345              JSR     print_tabs
00001D36  4EB9 00001F36           1346              JSR     CHK_MODE3       *Sees which EAs to check
00001D3C  4E75                    1347              RTS            
00001D3E                          1348              
00001D3E  4EB9 00002522           1349  ea_LSR      JSR     print_LSR
00001D44  4EB9 0000260A           1350              JSR     print_tabs
00001D4A  4EB9 00002644           1351              JSR     p_space4
00001D50  4EB9 00001F36           1352              JSR     CHK_MODE3       *Sees which EAs to check
00001D56  4E75                    1353              RTS
00001D58                          1354              
00001D58  4EB9 0000252C           1355  ea_LSL      JSR     print_LSL
00001D5E  4EB9 0000260A           1356              JSR     print_tabs
00001D64  4EB9 00002644           1357              JSR     p_space4
00001D6A  4EB9 00001F36           1358              JSR     CHK_MODE3       *Sees which EAs to check
00001D70  4E75                    1359              RTS        
00001D72                          1360  
00001D72  4EB9 00002536           1361  ea_ASR      JSR     print_ASR
00001D78  4EB9 0000260A           1362              JSR     print_tabs
00001D7E  4EB9 00002644           1363              JSR     p_space4
00001D84  4EB9 00001F36           1364              JSR     CHK_MODE3       *Sees which EAs to check
00001D8A  4E75                    1365              RTS
00001D8C                          1366  
00001D8C  4EB9 00002540           1367  ea_ASL      JSR     print_ASL
00001D92  4EB9 0000260A           1368              JSR     print_tabs
00001D98  4EB9 00002644           1369              JSR     p_space4
00001D9E  4EB9 00001F36           1370              JSR     CHK_MODE3       *Sees which EAs to check
00001DA4  4E75                    1371              RTS    
00001DA6                          1372  
00001DA6  3803                    1373  ea_SUB      MOVE.W  D3,D4           *Move op-code into D4
00001DA8  C87C 0E00               1374              AND.W   #$0E00,D4       *Mask everything except bit 9-11
00001DAC  E04C                    1375              LSR.W   #$8,D4          *Shift bits to the right 9
00001DAE  E24C                    1376              LSR.W   #$1,D4
00001DB0  1A04                    1377              MOVE.B  D4,D5           *Move data into D5 so that we can call print_dreg
00001DB2  4EB9 00002698           1378              JSR     print_D
00001DB8  4EB9 000026EC           1379              JSR     print_reg
00001DBE  4EB9 00002660           1380              JSR     print_comma
00001DC4  4EB9 00001E28           1381              JSR     CHK_MODE0Src
00001DCA  4E75                    1382              RTS
00001DCC                          1383  
00001DCC  3803                    1384  ea_OR       MOVE.W  D3,D4           *Move op-code into D4
00001DCE  C87C 0E00               1385              AND.W   #$0E00,D4       *Mask everything except bit 9-11
00001DD2  E04C                    1386              LSR.W   #$8,D4          *Shift bits to the right 9
00001DD4  E24C                    1387              LSR.W   #$1,D4
00001DD6  1A04                    1388              MOVE.B  D4,D5           *Move data into D5 so that we can call print_dreg
00001DD8  4EB9 00002698           1389              JSR     print_D
00001DDE  4EB9 000026EC           1390              JSR     print_reg
00001DE4  4EB9 00002660           1391              JSR     print_comma
00001DEA  4EB9 00001E28           1392              JSR     CHK_MODE0Src
00001DF0  4E75                    1393              RTS
00001DF2                          1394  
00001DF2  3803                    1395  ea_LEA      MOVE.W  D3,D4           *Move op-code into D4
00001DF4  C87C 0E00               1396              AND.W   #$0E00,D4       *Mask everything except bit 9-11
00001DF8  E04C                    1397              LSR.W   #$8,D4          *Shift bits to the right 9
00001DFA  E24C                    1398              LSR.W   #$1,D4
00001DFC  1A04                    1399              MOVE.B  D4,D5           *Move data into D5 so that we can call print_dreg
00001DFE  4EB9 00001E28           1400              JSR     CHK_MODE0Src
00001E04  4EB9 00002660           1401              JSR     print_comma
00001E0A  4EB9 000026A6           1402              JSR     print_A
00001E10  4EB9 000026EC           1403              JSR     print_reg
00001E16  4E75                    1404              RTS
00001E18                          1405  
00001E18  4EB9 00001E28           1406  ea_JSR      JSR     CHK_MODE0Src
00001E1E  4E75                    1407              RTS
00001E20                          1408              
00001E20  4EB9 00001E28           1409  ea_NOT      JSR     CHK_MODE0Src
00001E26  4E75                    1410              RTS       
00001E28                          1411  *-----------------------------------------------------------------------------------------------------------------
00001E28                          1412  *CHK_MODES
00001E28                          1413  *Description: Use these to check which modes to check when it's an EA.
00001E28                          1414  *Depending on which MODE you know you DON'T want to check, use one of these
00001E28                          1415  *Can't think of a more efficient way to do it.
00001E28                          1416  *-----------------------------------------------------------------------------------------------------------------
00001E28                          1417  
00001E28                          1418  ************************************************************
00001E28                          1419  *Subroutine CHK_MODE0Src
00001E28                          1420  *Description: Checks all needed modes 
00001E28                          1421  ************************************************************
00001E28                          1422  
00001E28  3803                    1423  CHK_MODE0Src   MOVE.W  D3,D4
00001E2A  C87C 0038               1424              AND.W   #$0038,D4
00001E2E  E64C                    1425              LSR.W   #$3,D4
00001E30                          1426              
00001E30  B83C 0000               1427              CMP.B   #%0000,D4       *Is it data reg mode?
00001E34  6700 0184               1428              BEQ     MODE000
00001E38                          1429              
00001E38  B83C 0001               1430              CMP.B   #%0001,D4       *Is it Address direct mode?
00001E3C  6700 018A               1431              BEQ     MODE001
00001E40                          1432              
00001E40  B83C 0002               1433              CMP.B   #%0010,D4       *Is it Address indirect mode?
00001E44  6700 0190               1434              BEQ     MODE010
00001E48                          1435              
00001E48  B83C 0003               1436              CMP.B   #%0011,D4       *Is it address post increment mode?
00001E4C  6700 019C               1437              BEQ     MODE011
00001E50                          1438              
00001E50  B83C 0004               1439              CMP.B   #%0100,D4       *Is it address pre decrement mode?
00001E54  6700 01A8               1440              BEQ     MODE100
00001E58                          1441              
00001E58  B83C 0007               1442              CMP.B   #%0111,D4       *Is it one of the 111 modes?
00001E5C  6700 01B4               1443              BEQ     MODE111
00001E60  6000 093C               1444              BRA     bad_instr       *Its a bad instruction
00001E64                          1445  
00001E64                          1446  ************************************************************
00001E64                          1447  *Subroutine CHK_MOVEM
00001E64                          1448  *Description: Checks all needed modes 
00001E64                          1449  ************************************************************
00001E64                          1450  
00001E64  3803                    1451  CHK_MOVEM   MOVE.W  D3,D4
00001E66  C87C 0038               1452              AND.W   #$0038,D4
00001E6A  E64C                    1453              LSR.W   #$3,D4
00001E6C                          1454              
00001E6C  B83C 0002               1455              CMP.B   #%0010,D4       *Is it Address indirect mode?
00001E70  6700 0164               1456              BEQ     MODE010
00001E74                          1457              
00001E74  B83C 0003               1458              CMP.B   #%0011,D4       *Is it address post increment mode?
00001E78  6700 0170               1459              BEQ     MODE011
00001E7C                          1460              
00001E7C  B83C 0004               1461              CMP.B   #%0100,D4       *Is it address pre decrement mode?
00001E80  6700 017C               1462              BEQ     MODE100
00001E84                          1463              
00001E84  B83C 0007               1464              CMP.B   #%0111,D4       *Is it one of the 111 modes?
00001E88  6700 0216               1465              BEQ     MOVEM111
00001E8C                          1466              
00001E8C  B2D8                    1467              CMPA.W  (A0)+,A1
00001E8E  6000 090E               1468              BRA     bad_instr       *Its a bad instruction
00001E92                          1469  
00001E92                          1470  ************************************************************
00001E92                          1471  *Subroutine CHK_MODE0Dest
00001E92                          1472  *Description: Checks all needed modes 
00001E92                          1473  ************************************************************
00001E92                          1474  
00001E92  3803                    1475  CHK_MODE0Dest   MOVE.W  D3,D4
00001E94  C87C 01C0               1476              AND.W   #$01C0,D4
00001E98  EC4C                    1477              LSR.W   #$6,D4
00001E9A                          1478              
00001E9A  B83C 0000               1479              CMP.B   #%0000,D4       *Is it data reg mode?
00001E9E  6700 021A               1480              BEQ     MODE000D
00001EA2                          1481              
00001EA2  B83C 0001               1482              CMP.B   #%0001,D4       *Is it Address direct mode?
00001EA6  6700 0220               1483              BEQ     MODE001D
00001EAA                          1484              
00001EAA  B83C 0002               1485              CMP.B   #%0010,D4       *Is it Address indirect mode?
00001EAE  6700 0226               1486              BEQ     MODE010D
00001EB2                          1487              
00001EB2  B83C 0003               1488              CMP.B   #%0011,D4       *Is it address post increment mode?
00001EB6  6700 0232               1489              BEQ     MODE011D
00001EBA                          1490              
00001EBA  B83C 0004               1491              CMP.B   #%0100,D4       *Is it address pre decrement mode?
00001EBE  6700 023E               1492              BEQ     MODE100D
00001EC2                          1493              
00001EC2  B83C 0007               1494              CMP.B   #%0111,D4       *Is it one of the 111 modes?
00001EC6  6700 024A               1495              BEQ     MODE111D
00001ECA  6000 08D2               1496              BRA     bad_instr       *Its a bad instruction
00001ECE                          1497  
00001ECE                          1498  ************************************************************
00001ECE                          1499  *Subroutine CHK_MODE1
00001ECE                          1500  *Description: Checks all needed modes EXCEPT Address reg direct
00001ECE                          1501  ************************************************************
00001ECE                          1502  
00001ECE  3803                    1503  CHK_MODE1   MOVE.W  D3,D4
00001ED0  C87C 0038               1504              AND.W   #$0038,D4
00001ED4  E64C                    1505              LSR.W   #$3,D4
00001ED6                          1506              
00001ED6  B83C 0000               1507              CMP.B   #%0000,D4       *Is it data reg mode?
00001EDA  6700 00DE               1508              BEQ     MODE000
00001EDE                          1509              
00001EDE  B83C 0002               1510              CMP.B   #%0010,D4       *Is it Address indirect mode?
00001EE2  6700 00F2               1511              BEQ     MODE010
00001EE6                          1512              
00001EE6  B83C 0003               1513              CMP.B   #%0011,D4       *Is it address post increment mode?
00001EEA  6700 00FE               1514              BEQ     MODE011
00001EEE                          1515              
00001EEE  B83C 0004               1516              CMP.B   #%0100,D4       *Is it address pre decrement mode?
00001EF2  6700 010A               1517              BEQ     MODE100
00001EF6                          1518              
00001EF6  B83C 0007               1519              CMP.B   #%0111,D4       *Is it one of the 111 modes?
00001EFA  6700 0116               1520              BEQ     MODE111
00001EFE  6000 089E               1521              BRA     bad_instr       *Its a bad instruction
00001F02                          1522              
00001F02                          1523  ************************************************************
00001F02                          1524  *Subroutine CHK_MODE2
00001F02                          1525  *Description: Checks all needed modes EXCEPT Address reg direct
00001F02                          1526  *and Data Register
00001F02                          1527  ************************************************************
00001F02                          1528  
00001F02  3803                    1529  CHK_MODE2   MOVE.W  D3,D4
00001F04  C87C 0038               1530              AND.W   #$0038,D4
00001F08  E64C                    1531              LSR.W   #$3,D4
00001F0A                          1532              
00001F0A  B83C 0000               1533              CMP.B   #%0,D4          *Is it data reg?
00001F0E  6700 00AA               1534              BEQ     MODE000
00001F12                          1535              
00001F12  B83C 0002               1536              CMP.B   #%0010,D4       *Is it Address indirect mode?
00001F16  6700 00BE               1537              BEQ     MODE010
00001F1A                          1538              
00001F1A  B83C 0003               1539              CMP.B   #%0011,D4       *Is it address post increment mode?
00001F1E  6700 00CA               1540              BEQ     MODE011
00001F22                          1541              
00001F22  B83C 0004               1542              CMP.B   #%0100,D4       *Is it address pre decrement mode?
00001F26  6700 00D6               1543              BEQ     MODE100
00001F2A                          1544              
00001F2A  B83C 0007               1545              CMP.B   #%0111,D4       *Is it one of the 111 modes?
00001F2E  6700 00E2               1546              BEQ     MODE111
00001F32  6000 086A               1547              BRA     bad_instr       *Its a bad instruction    
00001F36                          1548  
00001F36                          1549  ************************************************************
00001F36                          1550  *Subroutine CHK_MODE3
00001F36                          1551  *Description: Checks all needed modes EXCEPT Address reg direct
00001F36                          1552  *add reg direct, and data address mod
00001F36                          1553  ************************************************************
00001F36                          1554  
00001F36  3803                    1555  CHK_MODE3   MOVE.W  D3,D4
00001F38  C87C 0038               1556              AND.W   #$0038,D4
00001F3C  E64C                    1557              LSR.W   #$3,D4
00001F3E                          1558              
00001F3E  B83C 0002               1559              CMP.B   #%0010,D4       *Is it Address indirect mode?
00001F42  6700 0092               1560              BEQ     MODE010
00001F46                          1561              
00001F46  B83C 0003               1562              CMP.B   #%0011,D4       *Is it address post increment mode?
00001F4A  6700 009E               1563              BEQ     MODE011
00001F4E                          1564              
00001F4E  B83C 0004               1565              CMP.B   #%0100,D4       *Is it address pre decrement mode?
00001F52  6700 00AA               1566              BEQ     MODE100
00001F56                          1567              
00001F56  3803                    1568              MOVE.W  D3,D4
00001F58  C87C 003F               1569              AND.W   #$003F,D4
00001F5C                          1570              
00001F5C  B83C 0038               1571              CMP.B   #%0000000000111000,D4       *Is it one of the 111 modes?
00001F60  6700 00D4               1572              BEQ     WordMode
00001F64                          1573              
00001F64  B83C 0039               1574              CMP.B   #%0000000000111001,D4       *Is it one of the 111 modes?
00001F68  6700 00E0               1575              BEQ     LongMode
00001F6C  6000 0830               1576              BRA     bad_instr       *Its a bad instruction   
00001F70                          1577              
00001F70                          1578  ************************************************************
00001F70                          1579  *Subroutine CHK_MODE4
00001F70                          1580  *Description: Checks all needed modes data immediate
00001F70                          1581  ************************************************************
00001F70                          1582  
00001F70  3803                    1583  CHK_MODE4   MOVE.W  D3,D4
00001F72  C87C 0038               1584              AND.W   #$0038,D4
00001F76  E64C                    1585              LSR.W   #$3,D4
00001F78                          1586              
00001F78  B83C 0000               1587              CMP.B   #%0000,D4       *Is it data reg?
00001F7C  6700 003C               1588              BEQ     MODE000
00001F80                          1589              
00001F80  B83C 0001               1590              CMP.B   #%0001,D4       *Is it Address direct mode?
00001F84  6700 0042               1591              BEQ     MODE001
00001F88                          1592              
00001F88  B83C 0002               1593              CMP.B   #%0010,D4       *Is it Address indirect mode?
00001F8C  6700 0048               1594              BEQ     MODE010
00001F90                          1595              
00001F90  B83C 0003               1596              CMP.B   #%0011,D4       *Is it address post increment mode?
00001F94  6700 0054               1597              BEQ     MODE011
00001F98                          1598              
00001F98  B83C 0004               1599              CMP.B   #%0100,D4       *Is it address pre decrement mode?
00001F9C  6700 0060               1600              BEQ     MODE100
00001FA0                          1601              
00001FA0  3803                    1602              MOVE.W  D3,D4
00001FA2  C87C 003F               1603              AND.W   #$003F,D4
00001FA6                          1604              
00001FA6  B83C 0038               1605              CMP.B   #%0000000000111000,D4       *Is it one of the 111 modes?
00001FAA  6700 008A               1606              BEQ     WordMode
00001FAE                          1607              
00001FAE  B83C 0039               1608              CMP.B   #%0000000000111001,D4       *Is it one of the 111 modes?
00001FB2  6700 0096               1609              BEQ     LongMode
00001FB6  6000 07E6               1610              BRA     bad_instr       *Its a bad instruction               
00001FBA                          1611  *-----------------------------------------------------------------------------------------------------------------
00001FBA                          1612  *Mode codes
00001FBA                          1613  *Description: use these to determine and print out which mode it is 
00001FBA                          1614  *-----------------------------------------------------------------------------------------------------------------
00001FBA                          1615              
00001FBA  4EB9 00002698           1616  MODE000     JSR     print_D
00001FC0  4EB9 00002080           1617              JSR     find_EA_reg
00001FC6  4E75                    1618              RTS
00001FC8                          1619              
00001FC8                          1620  
00001FC8  4EB9 000026A6           1621  MODE001     JSR     print_A
00001FCE  4EB9 00002080           1622              JSR     find_EA_reg
00001FD4  4E75                    1623              RTS
00001FD6                          1624  
00001FD6  4EB9 000026B4           1625  MODE010     JSR     print_ARIStart
00001FDC  4EB9 00002080           1626              JSR     find_EA_reg
00001FE2  4EB9 000026C2           1627              JSR     print_ARIEnd
00001FE8  4E75                    1628              RTS
00001FEA                          1629  
00001FEA  4EB9 000026B4           1630  MODE011     JSR     print_ARIStart
00001FF0  4EB9 00002080           1631              JSR     find_EA_reg
00001FF6  4EB9 000026D0           1632              JSR     print_ARIPostEnd
00001FFC  4E75                    1633              RTS
00001FFE                          1634  
00001FFE  4EB9 000026DE           1635  MODE100     JSR     print_ARIPreStart
00002004  4EB9 00002080           1636              JSR     find_EA_reg
0000200A  4EB9 000026C2           1637              JSR     print_ARIEnd
00002010  4E75                    1638              RTS
00002012                          1639  
00002012  3803                    1640  MODE111     MOVE.W  D3,D4
00002014  C87C 0007               1641              AND.W   #$0007,D4
00002018  B83C 0000               1642              CMP.B   #$0000,D4
0000201C  6700 0018               1643              BEQ     WordMode
00002020  B83C 0001               1644              CMP.B   #$0001,D4
00002024  6700 0024               1645              BEQ     LongMode
00002028  B83C 0004               1646              CMP.B   #$0004,D4
0000202C  6700 0030               1647              BEQ     DataMode
00002030  6000 076C               1648              BRA     bad_instr       *Its a bad instruction
00002034  4E75                    1649              RTS
00002036                          1650              
00002036  4EB9 0000268A           1651  WordMode    JSR     print_absolute
0000203C  3218                    1652              MOVE.W  (A0)+,D1
0000203E  103C 000F               1653              MOVE.B  #15,D0
00002042  143C 0010               1654              MOVE.B  #16,D2
00002046  4E4F                    1655              TRAP    #15
00002048  4E75                    1656              RTS
0000204A                          1657  
0000204A  4EB9 0000268A           1658  LongMode    JSR     print_absolute
00002050  2218                    1659              MOVE.L  (A0)+,D1
00002052  103C 000F               1660              MOVE.B  #15,D0
00002056  143C 0010               1661              MOVE.B  #16,D2
0000205A  4E4F                    1662              TRAP    #15
0000205C  4E75                    1663              RTS
0000205E                          1664  
0000205E  4EB9 0000267C           1665  DataMode    JSR     print_immed
00002064  BA3C 0002               1666              CMP.B   #$02,D5
00002068  6700 0008               1667              BEQ     DataModeSL
0000206C  3218                    1668              MOVE.W  (A0)+,D1
0000206E  6000 0004               1669              BRA     DataModeP
00002072  2218                    1670  DataModeSL  MOVE.L  (A0)+,D1
00002074  103C 000F               1671  DataModeP   MOVE.B  #15,D0
00002078  143C 0010               1672              MOVE.B  #16,D2
0000207C  4E4F                    1673              TRAP    #15
0000207E  4E75                    1674              RTS    
00002080                          1675  
00002080  3803                    1676  find_EA_reg MOVE.W  D3,D4           *Move fresh copy of op-code into D4
00002082  C87C 0007               1677              AND.W   #$0007,D4       *Mask everything except bits 0-2
00002086  B83C 0007               1678              CMP.B   #7,D4           *If higher than 7, not a valid register
0000208A  6E00 0014               1679              BGT     EA_Reg_Err
0000208E  B83C 0000               1680              CMP.B   #0,D4           *If less than 0, not a valid register
00002092  6D00 000C               1681              BLT     EA_Reg_Err
00002096                          1682              
00002096  2204                    1683              MOVE.L  D4,D1           *Move number 0-7 into D1 to be printed
00002098  103C 0003               1684              MOVE.B  #3,D0
0000209C  4E4F                    1685              TRAP    #15
0000209E  4E75                    1686              RTS
000020A0                          1687              
000020A0                          1688  EA_Reg_Err  *Print error
000020A0                          1689  
000020A0                          1690  *-----------------------------------------------------------------------------------------------------------------
000020A0                          1691  *Mode codes for .W or .L for MOVEM
000020A0                          1692  *Description: use these to determine and print out which 111 mode is used in MOVEM
000020A0                          1693  *-----------------------------------------------------------------------------------------------------------------
000020A0  3803                    1694  MOVEM111    MOVE.W  D3,D4
000020A2  C87C 0007               1695              AND.W   #$0007,D4
000020A6  B83C 0000               1696              CMP.B   #$0000,D4
000020AA  678A                    1697              BEQ     WordMode
000020AC  B83C 0001               1698              CMP.B   #$0001,D4
000020B0  6798                    1699              BEQ     LongMode
000020B2                          1700              
000020B2  B2D8                    1701              CMPA.W  (A0)+,A1
000020B4  6000 06E8               1702              BRA     bad_instr
000020B8  4E75                    1703              RTS
000020BA                          1704              
000020BA                          1705  *-----------------------------------------------------------------------------------------------------------------
000020BA                          1706  *Mode codes for Destination Registers
000020BA                          1707  *Description: use these to determine and print out which mode it is 
000020BA                          1708  *-----------------------------------------------------------------------------------------------------------------
000020BA                          1709              
000020BA  4EB9 00002698           1710  MODE000D    JSR     print_D
000020C0  4EB9 0000217E           1711              JSR     find_EA_regD
000020C6  4E75                    1712              RTS
000020C8                          1713              
000020C8                          1714  
000020C8  4EB9 000026A6           1715  MODE001D    JSR     print_A
000020CE  4EB9 0000217E           1716              JSR     find_EA_regD
000020D4  4E75                    1717              RTS
000020D6                          1718  
000020D6  4EB9 000026B4           1719  MODE010D    JSR     print_ARIStart
000020DC  4EB9 0000217E           1720              JSR     find_EA_regD
000020E2  4EB9 000026C2           1721              JSR     print_ARIEnd
000020E8  4E75                    1722              RTS
000020EA                          1723  
000020EA  4EB9 000026B4           1724  MODE011D    JSR     print_ARIStart
000020F0  4EB9 0000217E           1725              JSR     find_EA_regD
000020F6  4EB9 000026D0           1726              JSR     print_ARIPostEnd
000020FC  4E75                    1727              RTS
000020FE                          1728  
000020FE  4EB9 000026DE           1729  MODE100D    JSR     print_ARIPreStart
00002104  4EB9 0000217E           1730              JSR     find_EA_regD
0000210A  4EB9 000026C2           1731              JSR     print_ARIEnd
00002110  4E75                    1732              RTS
00002112                          1733  
00002112  3803                    1734  MODE111D    MOVE.W  D3,D4           *Move fresh copy of op-code into D4
00002114  C87C 0E00               1735              AND.W   #$0E00,D4       *Mask everything except bits 9-11
00002118  EC4C                    1736              LSR.W   #$6,D4
0000211A  E64C                    1737              LSR.W   #$3,D4
0000211C  B83C 0000               1738              CMP.B   #$0000,D4
00002120  6700 0012               1739              BEQ     WordModeD
00002124  B83C 0001               1740              CMP.B   #$0001,D4
00002128  6700 001E               1741              BEQ     LongModeD
0000212C  B83C 0004               1742              CMP.B   #$0004,D4
00002130  6700 002A               1743              BEQ     DataModeD
00002134                          1744              
00002134  4EB9 0000268A           1745  WordModeD   JSR     print_absolute
0000213A  3218                    1746              MOVE.W  (A0)+,D1
0000213C  103C 000F               1747              MOVE.B  #15,D0
00002140  143C 0010               1748              MOVE.B  #16,D2
00002144  4E4F                    1749              TRAP    #15
00002146  4E75                    1750              RTS
00002148                          1751  
00002148  4EB9 0000268A           1752  LongModeD   JSR     print_absolute
0000214E  2218                    1753              MOVE.L  (A0)+,D1
00002150  103C 000F               1754              MOVE.B  #15,D0
00002154  143C 0010               1755              MOVE.B  #16,D2
00002158  4E4F                    1756              TRAP    #15
0000215A  4E75                    1757              RTS
0000215C                          1758  
0000215C  4EB9 0000267C           1759  DataModeD   JSR     print_immed
00002162  BA3C 0002               1760              CMP.B   #$02,D5
00002166  6700 0008               1761              BEQ     DataModeDL
0000216A  3218                    1762              MOVE.W  (A0)+,D1
0000216C  6000 0004               1763              BRA     DataModePD
00002170  2218                    1764  DataModeDL  MOVE.L  (A0)+,D1
00002172  103C 000F               1765  DataModePD  MOVE.B  #15,D0
00002176  143C 0010               1766              MOVE.B  #16,D2
0000217A  4E4F                    1767              TRAP    #15
0000217C  4E75                    1768              RTS    
0000217E                          1769  
0000217E  3803                    1770  find_EA_regD MOVE.W  D3,D4           *Move fresh copy of op-code into D4
00002180  C87C 0E00               1771              AND.W   #$0E00,D4       *Mask everything except bits 9-11
00002184  EC4C                    1772              LSR.W   #$6,D4
00002186  E64C                    1773              LSR.W   #$3,D4
00002188  2204                    1774              MOVE.L  D4,D1           *Move number 0-7 into D1 to be printed
0000218A  103C 0003               1775              MOVE.B  #3,D0
0000218E  4E4F                    1776              TRAP    #15
00002190  4E75                    1777              RTS
00002192                          1778              
00002192                          1779  EA_Reg_ErrD  *Print error
00002192                          1780  
00002192                          1781  ************************************************************
00002192                          1782  *Subroutine MOVEM_READ
00002192                          1783  *Description: Prints the registers used for the read MOVEM op-code
00002192                          1784  ************************************************************
00002192  4285                    1785  MOVEM_READ  CLR.L   D5
00002194  3803                    1786              MOVE.W  D3,D4
00002196  4283                    1787              CLR.L   D3
00002198  E184                    1788              ASL.L   #8,D4
0000219A  E184                    1789              ASL.L   #8,D4
0000219C  E39C                    1790  MOVEM_LOOP  ROL.L   #1,D4
0000219E  1604                    1791              MOVE.B  D4,D3
000021A0  E29B                    1792              ROR.L   #1,D3
000021A2  5245                    1793              ADDQ.W  #1,D5
000021A4  BA7C 0010               1794              CMP.W   #16,D5
000021A8  66F2                    1795              BNE     MOVEM_LOOP
000021AA                          1796              
000021AA  E083                    1797              ASR.L   #8,D3
000021AC  E083                    1798              ASR.L   #8,D3
000021AE  4285                    1799              CLR.L   D5
000021B0                          1800              
000021B0  4284                    1801              CLR.L   D4
000021B2  3803                    1802              MOVE.W  D3,D4
000021B4                          1803  
000021B4  4EB9 000021BC           1804              JSR     MOVEM_WRITE
000021BA                          1805  
000021BA  4E75                    1806              RTS
000021BC                          1807  
000021BC                          1808  ************************************************************
000021BC                          1809  *Subroutine MOVEM_WRITE
000021BC                          1810  *Description: Prints the registers used for the read MOVEM op-code
000021BC                          1811  ************************************************************
000021BC  3803                    1812  MOVEM_WRITE MOVE.W  D3,D4           *Checks the 7th bit for A0
000021BE  C87C 0080               1813              AND.W   #$0080,D4       *Mask all but the 7th bit
000021C2  B87C 0080               1814              CMP.W   #$0080,D4       *See if the bit is eaul to 1
000021C6  6600 0026               1815              BNE     MOVEM_WA1       *If not, move to checking next bit
000021CA  4EB9 000026A6           1816              JSR     print_A         *If equal to 1, print out register
000021D0  1A3C 0000               1817              MOVE.B  #$0,D5
000021D4  4EB9 000026EC           1818              JSR     print_reg0
000021DA                          1819              
000021DA  3803                    1820              MOVE.W  D3,D4           *Get a new copy of Register List Mask field
000021DC  C87C FF7F               1821              AND.W   #$FF7F,D4       *Mask the bits that have been checked
000021E0  B87C 0000               1822              CMP.W   #0,D4          *Compare to 0, if equal branch to end
000021E4  6700 02E2               1823              BEQ     MOVEM_WE
000021E8  4EB9 0000266E           1824              JSR     print_slash     *If not equal, print / and  continue to check
000021EE                          1825              
000021EE  3803                    1826  MOVEM_WA1   MOVE.W  D3,D4
000021F0  C87C 0040               1827              AND.W   #$0040,D4
000021F4  B87C 0040               1828              CMP.W   #$0040,D4
000021F8  6600 0026               1829              BNE     MOVEM_WA2
000021FC  4EB9 000026A6           1830              JSR     print_A
00002202  1A3C 0001               1831              MOVE.B  #$1,D5
00002206  4EB9 000026FE           1832              JSR     print_reg1
0000220C                          1833              
0000220C  3803                    1834              MOVE.W  D3,D4
0000220E  C87C FF3F               1835              AND.W   #$FF3F,D4
00002212  B87C 0000               1836              CMP.W   #0,D4
00002216  6700 02B0               1837              BEQ     MOVEM_WE
0000221A  4EB9 0000266E           1838              JSR     print_slash
00002220                          1839              
00002220  3803                    1840  MOVEM_WA2   MOVE.W  D3,D4
00002222  C87C 0020               1841              AND.W   #$0020,D4
00002226  B87C 0020               1842              CMP.W   #$0020,D4
0000222A  6600 0026               1843              BNE     MOVEM_WA3
0000222E  4EB9 000026A6           1844              JSR     print_A
00002234  1A3C 0002               1845              MOVE.B  #$2,D5
00002238  4EB9 00002710           1846              JSR     print_reg2
0000223E                          1847              
0000223E  3803                    1848              MOVE.W  D3,D4
00002240  C87C FF1F               1849              AND.W   #$FF1F,D4
00002244  B87C 0000               1850              CMP.W   #0,D4
00002248  6700 027E               1851              BEQ     MOVEM_WE
0000224C  4EB9 0000266E           1852              JSR     print_slash
00002252                          1853              
00002252  3803                    1854  MOVEM_WA3   MOVE.W  D3,D4
00002254  C87C 0010               1855              AND.W   #$0010,D4
00002258  B87C 0010               1856              CMP.W   #$0010,D4
0000225C  6600 0026               1857              BNE     MOVEM_WA4
00002260  4EB9 000026A6           1858              JSR     print_A
00002266  1A3C 0003               1859              MOVE.B  #$3,D5
0000226A  4EB9 00002722           1860              JSR     print_reg3
00002270                          1861              
00002270  3803                    1862              MOVE.W  D3,D4
00002272  C87C FF0F               1863              AND.W   #$FF0F,D4
00002276  B87C 0000               1864              CMP.W   #0,D4
0000227A  6700 024C               1865              BEQ     MOVEM_WE
0000227E  4EB9 0000266E           1866              JSR     print_slash
00002284                          1867              
00002284  3803                    1868  MOVEM_WA4   MOVE.W  D3,D4
00002286  C87C 0008               1869              AND.W   #$0008,D4
0000228A  B87C 0008               1870              CMP.W   #$0008,D4
0000228E  6600 0026               1871              BNE     MOVEM_WA5
00002292  4EB9 000026A6           1872              JSR     print_A
00002298  1A3C 0004               1873              MOVE.B  #$4,D5
0000229C  4EB9 00002734           1874              JSR     print_reg4
000022A2                          1875  
000022A2  3803                    1876              MOVE.W  D3,D4
000022A4  C87C FF07               1877              AND.W   #$FF07,D4
000022A8  B87C 0000               1878              CMP.W   #0,D4
000022AC  6700 021A               1879              BEQ     MOVEM_WE
000022B0  4EB9 0000266E           1880              JSR     print_slash
000022B6                          1881  
000022B6  3803                    1882  MOVEM_WA5   MOVE.W  D3,D4
000022B8  C87C 0004               1883              AND.W   #$0004,D4
000022BC  B87C 0004               1884              CMP.W   #$0004,D4
000022C0  6600 0026               1885              BNE     MOVEM_WA6
000022C4  4EB9 000026A6           1886              JSR     print_A
000022CA  1A3C 0005               1887              MOVE.B  #$5,D5
000022CE  4EB9 00002746           1888              JSR     print_reg5
000022D4                          1889              
000022D4  3803                    1890              MOVE.W  D3,D4
000022D6  C87C FF03               1891              AND.W   #$FF03,D4
000022DA  B87C 0000               1892              CMP.W   #0,D4
000022DE  6700 01E8               1893              BEQ     MOVEM_WE
000022E2  4EB9 0000266E           1894              JSR     print_slash
000022E8                          1895              
000022E8  3803                    1896  MOVEM_WA6   MOVE.W  D3,D4
000022EA  C87C 0002               1897              AND.W   #$0002,D4
000022EE  B87C 0002               1898              CMP.W   #$0002,D4
000022F2  6600 0026               1899              BNE     MOVEM_WA7
000022F6  4EB9 000026A6           1900              JSR     print_A
000022FC  1A3C 0006               1901              MOVE.B  #$6,D5
00002300  4EB9 00002758           1902              JSR     print_reg6
00002306                          1903              
00002306  3803                    1904              MOVE.W  D3,D4
00002308  C87C FF01               1905              AND.W   #$FF01,D4
0000230C  B87C 0000               1906              CMP.W   #0,D4
00002310  6700 01B6               1907              BEQ     MOVEM_WE
00002314  4EB9 0000266E           1908              JSR     print_slash
0000231A                          1909              
0000231A  3803                    1910  MOVEM_WA7   MOVE.W  D3,D4
0000231C  C87C 0001               1911              AND.W   #$0001,D4
00002320  B87C 0001               1912              CMP.W   #$0001,D4
00002324  6600 0026               1913              BNE     MOVEM_WD0
00002328  4EB9 000026A6           1914              JSR     print_A
0000232E  1A3C 0007               1915              MOVE.B  #$7,D5
00002332  4EB9 0000276A           1916              JSR     print_reg7
00002338                          1917              
00002338  3803                    1918              MOVE.W  D3,D4
0000233A  C87C FF00               1919              AND.W   #$FF00,D4
0000233E  B87C 0000               1920              CMP.W   #0,D4
00002342  6700 0184               1921              BEQ     MOVEM_WE
00002346  4EB9 0000266E           1922              JSR     print_slash
0000234C                          1923              
0000234C  3803                    1924  MOVEM_WD0   MOVE.W  D3,D4
0000234E  C87C 8000               1925              AND.W   #$8000,D4
00002352  B87C 8000               1926              CMP.W   #$8000,D4
00002356  6600 0026               1927              BNE     MOVEM_WD1
0000235A  4EB9 00002698           1928              JSR     print_D
00002360  1A3C 0000               1929              MOVE.B  #$0,D5
00002364  4EB9 000026EC           1930              JSR     print_reg0
0000236A                          1931              
0000236A  3803                    1932              MOVE.W  D3,D4
0000236C  C87C 7F00               1933              AND.W   #$7F00,D4
00002370  B87C 0000               1934              CMP.W   #0,D4
00002374  6700 0152               1935              BEQ     MOVEM_WE
00002378  4EB9 0000266E           1936              JSR     print_slash
0000237E                          1937              
0000237E  3803                    1938  MOVEM_WD1   MOVE.W  D3,D4
00002380  C87C 4000               1939              AND.W   #$4000,D4
00002384  B87C 4000               1940              CMP.W   #$4000,D4
00002388  6600 0026               1941              BNE     MOVEM_WD2
0000238C  4EB9 00002698           1942              JSR     print_D
00002392  1A3C 0001               1943              MOVE.B  #$1,D5
00002396  4EB9 000026FE           1944              JSR     print_reg1
0000239C                          1945              
0000239C  3803                    1946              MOVE.W  D3,D4
0000239E  C87C 3F00               1947              AND.W   #$3F00,D4
000023A2  B87C 0000               1948              CMP.W   #0,D4
000023A6  6700 0120               1949              BEQ     MOVEM_WE
000023AA  4EB9 0000266E           1950              JSR     print_slash
000023B0                          1951              
000023B0  3803                    1952  MOVEM_WD2   MOVE.W  D3,D4
000023B2  C87C 2000               1953              AND.W   #$2000,D4
000023B6  B87C 2000               1954              CMP.W   #$2000,D4
000023BA  6600 0026               1955              BNE     MOVEM_WD3
000023BE  4EB9 00002698           1956              JSR     print_D
000023C4  1A3C 0002               1957              MOVE.B  #$2,D5
000023C8  4EB9 00002710           1958              JSR     print_reg2
000023CE                          1959              
000023CE  3803                    1960              MOVE.W  D3,D4
000023D0  C87C 1F00               1961              AND.W   #$1F00,D4
000023D4  B87C 0000               1962              CMP.W   #0,D4
000023D8  6700 00EE               1963              BEQ     MOVEM_WE
000023DC  4EB9 0000266E           1964              JSR     print_slash
000023E2                          1965              
000023E2  3803                    1966  MOVEM_WD3   MOVE.W  D3,D4
000023E4  C87C 1000               1967              AND.W   #$1000,D4
000023E8  B87C 1000               1968              CMP.W   #$1000,D4
000023EC  6600 0026               1969              BNE     MOVEM_WD4
000023F0  4EB9 00002698           1970              JSR     print_D
000023F6  1A3C 0003               1971              MOVE.B  #$3,D5
000023FA  4EB9 00002722           1972              JSR     print_reg3
00002400                          1973              
00002400  3803                    1974              MOVE.W  D3,D4
00002402  C87C 0F00               1975              AND.W   #$0F00,D4
00002406  B87C 0000               1976              CMP.W   #0,D4
0000240A  6700 00BC               1977              BEQ     MOVEM_WE
0000240E  4EB9 0000266E           1978              JSR     print_slash
00002414                          1979  
00002414  3803                    1980  MOVEM_WD4   MOVE.W  D3,D4
00002416  C87C 0800               1981              AND.W   #$0800,D4
0000241A  B87C 0800               1982              CMP.W   #$0800,D4
0000241E  6600 0026               1983              BNE     MOVEM_WD5
00002422  4EB9 00002698           1984              JSR     print_D
00002428  1A3C 0004               1985              MOVE.B  #$4,D5
0000242C  4EB9 00002734           1986              JSR     print_reg4
00002432                          1987              
00002432  3803                    1988              MOVE.W  D3,D4
00002434  C87C 0700               1989              AND.W   #$0700,D4
00002438  B87C 0000               1990              CMP.W   #0,D4
0000243C  6700 008A               1991              BEQ     MOVEM_WE
00002440  4EB9 0000266E           1992              JSR     print_slash
00002446                          1993              
00002446  3803                    1994  MOVEM_WD5   MOVE.W  D3,D4
00002448  C87C 0400               1995              AND.W   #$0400,D4
0000244C  B87C 0400               1996              CMP.W   #$0400,D4
00002450  6600 0026               1997              BNE     MOVEM_WD6
00002454  4EB9 00002698           1998              JSR     print_D
0000245A  1A3C 0005               1999              MOVE.B  #$5,D5
0000245E  4EB9 00002746           2000              JSR     print_reg5
00002464                          2001              
00002464  3803                    2002              MOVE.W  D3,D4
00002466  C87C 0300               2003              AND.W   #$0300,D4
0000246A  B87C 0000               2004              CMP.W   #0,D4
0000246E  6700 0058               2005              BEQ     MOVEM_WE
00002472  4EB9 0000266E           2006              JSR     print_slash
00002478                          2007              
00002478  3803                    2008  MOVEM_WD6   MOVE.W  D3,D4
0000247A  C87C 0200               2009              AND.W   #$0200,D4
0000247E  B87C 0200               2010              CMP.W   #$0200,D4
00002482  6600 0026               2011              BNE     MOVEM_WD7
00002486  4EB9 00002698           2012              JSR     print_D
0000248C  1A3C 0006               2013              MOVE.B  #$6,D5
00002490  4EB9 00002758           2014              JSR     print_reg6
00002496                          2015              
00002496  3803                    2016              MOVE.W  D3,D4
00002498  C87C 0100               2017              AND.W   #$0100,D4
0000249C  B87C 0000               2018              CMP.W   #$0,D4
000024A0  6700 0026               2019              BEQ     MOVEM_WE
000024A4  4EB9 0000266E           2020              JSR     print_slash
000024AA                          2021              
000024AA  3803                    2022  MOVEM_WD7   MOVE.W  D3,D4
000024AC  C87C 0100               2023              AND.W   #$0100,D4
000024B0  B87C 0100               2024              CMP.W   #$0100,D4
000024B4  6600 0012               2025              BNE     MOVEM_WE
000024B8  4EB9 00002698           2026              JSR     print_D
000024BE  1A3C 0007               2027              MOVE.B  #$7,D5
000024C2  4EB9 0000276A           2028              JSR     print_reg7
000024C8                          2029  
000024C8  4285                    2030  MOVEM_WE    CLR.L   D5
000024CA  4E75                    2031              RTS
000024CC                          2032  
000024CC                          2033  *-----------Program Exit------------------------------------            
000024CC  103C 0009               2034  EXIT        MOVE.B  #9,D0           *Halts the simulator and exits the program
000024D0  4E4F                    2035              TRAP    #15
000024D2                          2036  
000024D2                          2037  *-----------------------------------------------------------------------------------------------------------------
000024D2                          2038  *           I/O SUBROUTINES
000024D2                          2039  *-----------------------------------------------------------------------------------------------------------------
000024D2                          2040  
000024D2                          2041  ************************************************************
000024D2                          2042  *Subroutine print_()
000024D2                          2043  *Description: Prints the OP-Code to the console
000024D2                          2044  ************************************************************
000024D2  43F9 00002A64           2045  print_NOP   LEA     NOPmsg,A1       *Load NOP
000024D8  6000 00B6               2046              BRA     print_it
000024DC                          2047  
000024DC  43F9 00002A68           2048  print_MOVE  LEA     MOVEmsg,A1      *Load MOVE
000024E2  6000 00AC               2049              BRA     print_it
000024E6                          2050  
000024E6  43F9 00002A6D           2051  print_MOVEA LEA     MOVEAmsg,A1     *Load MOVEA
000024EC  6000 00A2               2052              BRA     print_it
000024F0                          2053              
000024F0  43F9 00002A73           2054  print_ADD   LEA     ADDmsg,A1     *Load ADDA
000024F6  6000 0098               2055              BRA     print_it            
000024FA                          2056              
000024FA  43F9 00002A77           2057  print_ADDA  LEA     ADDAmsg,A1     *Load ADDA
00002500  6000 008E               2058              BRA     print_it      
00002504                          2059              
00002504  43F9 00002A7C           2060  print_AND   LEA     ANDmsg,A1     *Load AND
0000250A  6000 0084               2061              BRA     print_it   
0000250E                          2062  
0000250E  43F9 00002A84           2063  print_ROL   LEA     ROLmsg,A1     *Load ROL
00002514  6000 007A               2064              BRA     print_it      
00002518                          2065  
00002518  43F9 00002A80           2066  print_ROR   LEA     RORmsg,A1     *Load ROR
0000251E  6000 0070               2067              BRA     print_it       
00002522                          2068  
00002522  43F9 00002A88           2069  print_LSR   LEA     LSRmsg,A1     *Load LSR
00002528  6000 0066               2070              BRA     print_it       
0000252C                          2071  
0000252C  43F9 00002A8C           2072  print_LSL   LEA     LSLmsg,A1     *Load LSL
00002532  6000 005C               2073              BRA     print_it                   
00002536                          2074              
00002536  43F9 00002A90           2075  print_ASR   LEA     ASRmsg,A1     *Load LSR
0000253C  6000 0052               2076              BRA     print_it       
00002540                          2077  
00002540  43F9 00002A94           2078  print_ASL   LEA     ASLmsg,A1     *Load LSL
00002546  6000 0048               2079              BRA     print_it       
0000254A                          2080              
0000254A  43F9 00002A98           2081  print_MOVEQ LEA     MOVEQmsg,A1
00002550  6000 003E               2082              BRA     print_it
00002554                          2083              
00002554  43F9 00002A9E           2084  print_MOVEM LEA     MOVEMmsg,A1
0000255A  6000 0034               2085              BRA     print_it
0000255E                          2086  
0000255E  43F9 00002AA4           2087  print_SUB   LEA     SUBmsg,A1
00002564  6000 002A               2088              BRA     print_it
00002568                          2089              
00002568  43F9 00002AA8           2090  print_OR    LEA     ORmsg,A1
0000256E  6000 0020               2091              BRA     print_it
00002572                          2092              
00002572  43F9 00002AAB           2093  print_LEA   LEA     LEAmsg,A1
00002578  6000 0016               2094              BRA     print_it
0000257C                          2095              
0000257C  43F9 00002AAF           2096  print_JSR   LEA     JSRmsg,A1
00002582  6000 000C               2097              BRA     print_it
00002586                          2098  
00002586  43F9 00002AB3           2099  print_RTS   LEA     RTSmsg,A1
0000258C  6000 0002               2100              BRA     print_it
00002590                          2101  *ADD MORE STRINGS AS WE ADD THE OP-CODES
00002590                          2102  
00002590  123C 000E               2103  print_it    MOVE.B  #14,D1          *Print OP-Code
00002594  4E4F                    2104              TRAP    #15
00002596  4E75                    2105              RTS                     *Return to where subroutine was called
00002598                          2106  
00002598                          2107  ************************************************************
00002598                          2108  *Subroutine STRINGASCII
00002598                          2109  *Description: Converts String ASCII to Hexadecimal
00002598                          2110  *Will use D4 to store valid input (1/0) valid/invlad
00002598                          2111  *Will store valid user input into D5
00002598                          2112  ************************************************************
00002598  1419                    2113  STRINGASCII MOVE.B  (A1)+,D2        *Move the most significant bit to D2
0000259A  B43C 0000               2114              CMP.B   #$0,D2          *Check next character for null
0000259E  6700 0050               2115              BEQ     ENDSA           *If null, branch to end stringascii
000025A2                          2116  
000025A2  B43C 0066               2117              CMP.B   #102,D2         *Check if byte > 102
000025A6  6E00 0042               2118              BGT     ERROR
000025AA                          2119              
000025AA  B43C 0060               2120              CMP.B   #96,D2          *Within range we know is lowercase
000025AE  6E00 002A               2121              BGT     LOWER2HEX          
000025B2                          2122              
000025B2  B43C 0046               2123              CMP.B   #70,D2          * 96 > Byte > 70 error
000025B6  6E00 0032               2124              BGT     ERROR
000025BA                          2125              
000025BA  B43C 0040               2126              CMP.B   #64,D2          *Byte within range we know is upper
000025BE  6E00 0020               2127              BGT     UPPER2HEX
000025C2                          2128              
000025C2  B43C 0039               2129              CMP.B   #57,D2          * 57 < Byte < 64 error
000025C6  6E00 0022               2130              BGT     ERROR
000025CA                          2131              
000025CA  B43C 0030               2132              CMP.B   #48,D2          *Within range we know is a number
000025CE  6D00 001A               2133              BLT     ERROR
000025D2  0402 0030               2134              SUBI.B  #48,D2          *Subtract to get value
000025D6  6000 000C               2135              BRA     PUSH            *Done decoding number value, push on
000025DA                          2136  
000025DA  0402 0057               2137  LOWER2HEX   SUBI.B  #87,D2          *Change ASCII lowercase to value
000025DE  60B8                    2138              BRA     STRINGASCII
000025E0                          2139  
000025E0  0402 0037               2140  UPPER2HEX   SUBI.B  #55,D2          *Change ASCII uppercase to value
000025E4                          2141  
000025E4  E985                    2142  PUSH        ASL.L   #4,D5           *Make room for next byte
000025E6  DA02                    2143              ADD.B   D2,D5           *"push" new converted byte on
000025E8  60AE                    2144              BRA     STRINGASCII
000025EA                          2145              
000025EA  183C 0000               2146  ERROR       MOVE.B  #$0,D4          *Not valid character or byte
000025EE  4E75                    2147              RTS
000025F0                          2148              
000025F0  183C 0001               2149  ENDSA       MOVE.B  #$1,D4          *End STRINGASCII, everything passed
000025F4  4E75                    2150              RTS
000025F6                          2151  
000025F6                          2152  ************************************************************
000025F6                          2153  *Subroutine to_letter (Used by STRINGASCII)
000025F6                          2154  *Description: Converts ASCII letter to Hexadecimal number     
000025F6                          2155  ************************************************************
000025F6  C43C 000F               2156  to_letter   AND.B   #$0F,D2         *Mask the first 4 bits
000025FA  0602 0009               2157              ADD.B   #$9,D2          *Add $9 to it to get the proper hexidecimal number
000025FE  4E75                    2158              RTS                     *Return to where subroutine was called
00002600                          2159  
00002600                          2160  
00002600                          2161  ************************************************************
00002600                          2162  *Subroutine to_number (Used by STRINGASCII)
00002600                          2163  *Decription: Converts ASCII number to Hexidecimal number
00002600                          2164  ************************************************************ 
00002600  C43C 000F               2165  to_number   AND.B   #$0F,D2         *Mask the first 4 bits
00002604  4E75                    2166              RTS                     *Return to where subroutine was called
00002606                          2167              
00002606                          2168  ************************************************************
00002606                          2169  *Subroutine line_count
00002606                          2170  *Increment line counter
00002606                          2171  ************************************************************
00002606  5206                    2172  line_count  ADDI.B  #1,D6
00002608  4E75                    2173              RTS
0000260A                          2174              
0000260A                          2175  ************************************************************
0000260A                          2176  *Subroutine print_tabs
0000260A                          2177  *Description: Prints out two tabs into the console
0000260A                          2178  ************************************************************
0000260A  103C 000E               2179  print_tabs  MOVE.B  #14,D0          
0000260E  43F9 000029DD           2180              LEA     Tab,A1          *Loads '    ' to A1
00002614  4E4F                    2181              TRAP    #15
00002616  4E4F                    2182              TRAP    #15             *Prints two tabs
00002618  4E75                    2183              RTS
0000261A                          2184              
0000261A                          2185  ************************************************************
0000261A                          2186  *Subroutine p_space1
0000261A                          2187  *Description: Prints out 1 space to console
0000261A                          2188  ************************************************************
0000261A  103C 000E               2189  p_space1    MOVE.B  #14,D0          
0000261E  43F9 000029E1           2190              LEA     Space1,A1
00002624  4E4F                    2191              TRAP    #15
00002626  4E75                    2192              RTS
00002628                          2193              
00002628                          2194              
00002628                          2195  ************************************************************
00002628                          2196  *Subroutine p_space2
00002628                          2197  *Description: Prints out 2 spaces to console
00002628                          2198  ************************************************************
00002628  103C 000E               2199  p_space2    MOVE.B  #14,D0          
0000262C  43F9 000029E3           2200              LEA     Space2,A1
00002632  4E4F                    2201              TRAP    #15
00002634  4E75                    2202              RTS
00002636                          2203              
00002636                          2204  ************************************************************
00002636                          2205  *Subroutine p_space3
00002636                          2206  *Description: Prints out 3 spaces to console
00002636                          2207  ************************************************************
00002636  103C 000E               2208  p_space3    MOVE.B  #14,D0          
0000263A  43F9 000029E6           2209              LEA     Space3,A1
00002640  4E4F                    2210              TRAP    #15
00002642  4E75                    2211              RTS
00002644                          2212              
00002644                          2213  ************************************************************
00002644                          2214  *Subroutine p_space4
00002644                          2215  *Description: Prints out 4 spaces to console
00002644                          2216  ************************************************************
00002644  103C 000E               2217  p_space4    MOVE.B  #14,D0          
00002648  43F9 000029EA           2218              LEA     Space4,A1
0000264E  4E4F                    2219              TRAP    #15
00002650  4E75                    2220              RTS
00002652                          2221              
00002652                          2222  ************************************************************
00002652                          2223  *Subroutine print_newline
00002652                          2224  *Description: Prints out two tabs into the console
00002652                          2225  ************************************************************
00002652  103C 000E               2226  print_newline   MOVE.B  #14,D0
00002656  43F9 000029DA           2227              LEA     NewLine,A1      *Loads new line to A1
0000265C  4E4F                    2228              TRAP    #15             *Print to console
0000265E  4E75                    2229              RTS
00002660                          2230              
00002660                          2231  ************************************************************
00002660                          2232  *Subroutine print_comma
00002660                          2233  *Description: Prints out comma into the console
00002660                          2234  ************************************************************
00002660  103C 000E               2235  print_comma MOVE.B  #14,D0
00002664  43F9 000029EF           2236              LEA     Comma,A1        *Loads , to A1
0000266A  4E4F                    2237              TRAP    #15             *Print to console
0000266C  4E75                    2238              RTS
0000266E                          2239  
0000266E                          2240  ************************************************************
0000266E                          2241  *Subroutine print_slash
0000266E                          2242  *Description: Prints out a / into the console
0000266E                          2243  ************************************************************
0000266E  103C 000E               2244  print_slash MOVE.B  #14,D0
00002672  43F9 000029F1           2245              LEA     Slash,A1        *Loads , to A1
00002678  4E4F                    2246              TRAP    #15             *Print to console
0000267A  4E75                    2247              RTS
0000267C                          2248              
0000267C                          2249  ************************************************************
0000267C                          2250  *Subroutine print_immed
0000267C                          2251  *Description: Prints out comma into the console
0000267C                          2252  ************************************************************
0000267C  103C 000E               2253  print_immed MOVE.B  #14,D0
00002680  43F9 00002A5F           2254              LEA     Immediate,A1        *Loads , to A1
00002686  4E4F                    2255              TRAP    #15             *Print to console
00002688  4E75                    2256              RTS
0000268A                          2257  
0000268A                          2258  ************************************************************
0000268A                          2259  *Subroutine print_absolute
0000268A                          2260  *Description: Prints out comma into the console
0000268A                          2261  ************************************************************
0000268A  103C 000E               2262  print_absolute  MOVE.B  #14,D0
0000268E  43F9 00002A62           2263              LEA     Absolute,A1     *Loads $ to A1
00002694  4E4F                    2264              TRAP    #15             *Print to console
00002696  4E75                    2265              RTS
00002698                          2266  
00002698                          2267  
00002698                          2268  ************************************************************
00002698                          2269  *Subroutine print_D
00002698                          2270  *Description: Prints out comma into the console
00002698                          2271  ************************************************************
00002698  103C 000E               2272  print_D     MOVE.B  #14,D0
0000269C  43F9 00002A4F           2273              LEA     Dn,A1           *Loads , to A1
000026A2  4E4F                    2274              TRAP    #15             *Print to console
000026A4  4E75                    2275              RTS
000026A6                          2276  
000026A6                          2277  ************************************************************
000026A6                          2278  *Subroutine print_A
000026A6                          2279  *Description: Prints out comma into the console
000026A6                          2280  ************************************************************
000026A6  103C 000E               2281  print_A     MOVE.B  #14,D0
000026AA  43F9 00002A4D           2282              LEA     An,A1           *Loads , to A1
000026B0  4E4F                    2283              TRAP    #15             *Print to console
000026B2  4E75                    2284              RTS
000026B4                          2285  
000026B4                          2286  ************************************************************
000026B4                          2287  *Subroutine print_openparen
000026B4                          2288  *Description: Prints out comma into the console
000026B4                          2289  ************************************************************
000026B4  103C 000E               2290  print_ARIStart MOVE.B  #14,D0
000026B8  43F9 00002A51           2291              LEA     ARIStart,A1     *Loads , to A1
000026BE  4E4F                    2292              TRAP    #15             *Print to console
000026C0  4E75                    2293              RTS
000026C2                          2294  
000026C2                          2295  ************************************************************
000026C2                          2296  *Subroutine print_ARIEnd
000026C2                          2297  *Description: Prints out comma into the console
000026C2                          2298  ************************************************************
000026C2  103C 000E               2299  print_ARIEnd MOVE.B  #14,D0
000026C6  43F9 00002A54           2300              LEA     ARIEnd,A1       *Loads , to A1
000026CC  4E4F                    2301              TRAP    #15             *Print to console
000026CE  4E75                    2302              RTS
000026D0                          2303       
000026D0                          2304  ************************************************************
000026D0                          2305  *Subroutine print_ARIPostEnd
000026D0                          2306  *Description: Prints out comma into the console
000026D0                          2307  ************************************************************
000026D0  103C 000E               2308  print_ARIPostEnd MOVE.B  #14,D0
000026D4  43F9 00002A56           2309              LEA     ARIPostEnd,A1   *Loads , to A1
000026DA  4E4F                    2310              TRAP    #15             *Print to console
000026DC  4E75                    2311              RTS
000026DE                          2312              
000026DE                          2313  ************************************************************
000026DE                          2314  *Subroutine print_openparen
000026DE                          2315  *Description: Prints out comma into the console
000026DE                          2316  ************************************************************
000026DE  103C 000E               2317  print_ARIPreStart MOVE.B  #14,D0
000026E2  43F9 00002A59           2318              LEA     ARIPreStart,A1  *Loads , to A1
000026E8  4E4F                    2319              TRAP    #15             *Print to console
000026EA  4E75                    2320              RTS    
000026EC                          2321              
000026EC                          2322  ************************************************************
000026EC                          2323  *Subroutine print_reg
000026EC                          2324  *Prints out which register it is.
000026EC                          2325  *IMPORTANT: Must move register information to print into
000026EC                          2326  *D5 before calling this method.
000026EC                          2327  ************************************************************  
000026EC                          2328  print_reg
000026EC                          2329  
000026EC  BA3C 0000               2330  print_reg0  CMP.B   #0,D5
000026F0  6600 000C               2331              BNE     print_reg1
000026F4  43F9 00002AD0           2332              LEA     reg0_msg,A1
000026FA  6000 FE94               2333              BRA     print_it
000026FE                          2334              
000026FE  BA3C 0001               2335  print_reg1  CMP.B   #1,D5
00002702  6600 000C               2336              BNE     print_reg2
00002706  43F9 00002AD2           2337              LEA     reg1_msg,A1
0000270C  6000 FE82               2338              BRA     print_it
00002710                          2339              
00002710  BA3C 0002               2340  print_reg2  CMP.B   #2,D5
00002714  6600 000C               2341              BNE     print_reg3
00002718  43F9 00002AD4           2342              LEA     reg2_msg,A1
0000271E  6000 FE70               2343              BRA     print_it
00002722                          2344              
00002722  BA3C 0003               2345  print_reg3  CMP.B   #3,D5
00002726  6600 000C               2346              BNE     print_reg4
0000272A  43F9 00002AD6           2347              LEA     reg3_msg,A1
00002730  6000 FE5E               2348              BRA     print_it
00002734                          2349              
00002734  BA3C 0004               2350  print_reg4  CMP.B   #4,D5
00002738  6600 000C               2351              BNE     print_reg5
0000273C  43F9 00002AD8           2352              LEA     reg4_msg,A1
00002742  6000 FE4C               2353              BRA     print_it
00002746                          2354              
00002746  BA3C 0005               2355  print_reg5  CMP.B   #5,D5
0000274A  6600 000C               2356              BNE     print_reg6
0000274E  43F9 00002ADA           2357              LEA     reg5_msg,A1
00002754  6000 FE3A               2358              BRA     print_it
00002758                          2359              
00002758  BA3C 0006               2360  print_reg6  CMP.B   #6,D5
0000275C  6600 000C               2361              BNE     print_reg7
00002760  43F9 00002ADC           2362              LEA     reg6_msg,A1
00002766  6000 FE28               2363              BRA     print_it
0000276A                          2364              
0000276A  BA3C 0007               2365  print_reg7  CMP.B   #7,D5
0000276E  43F9 00002ADE           2366              LEA     reg7_msg,A1
00002774  6000 FE1A               2367              BRA     print_it     
00002778                          2368  
00002778                          2369  ************************************************************
00002778                          2370  *Subroutine print_data
00002778                          2371  *Description: Prints out comma into the console
00002778                          2372  ************************************************************
00002778  103C 000E               2373  print_data  MOVE.B  #14,D0
0000277C  43F9 00002972           2374              LEA     DataMsg,A1      *Loads , to A1
00002782  4E4F                    2375              TRAP    #15             *Print to console
00002784  4EB8 260A               2376              JSR     print_tabs
00002788  4EB8 2636               2377              JSR     p_space3
0000278C  4EB8 268A               2378              JSR     print_absolute
00002790  3203                    2379              MOVE.W  D3,D1
00002792  143C 0010               2380              MOVE.B  #16,D2
00002796  103C 000F               2381              MOVE.B  #15,D0
0000279A  4E4F                    2382              TRAP    #15
0000279C                          2383              *ADD.B   #1,D6
0000279C  4E75                    2384              RTS    
0000279E                          2385  
0000279E                          2386  ************************************************************
0000279E                          2387  *Subroutine bad_instr
0000279E                          2388  *Description: When we have a bad instruction we print
0000279E                          2389  *Bad Instruction, then move onto the next word
0000279E                          2390  ************************************************************
0000279E  103C 000E               2391  bad_instr   MOVE.B  #14,D0
000027A2  43F9 00002977           2392              LEA     BadCodeMsg,A1
000027A8  4E4F                    2393              TRAP    #15
000027AA  4EF8 10FC               2394              JMP     BadCodeJump        
000027AE                          2395              
000027AE                          2396   
000027AE                          2397  ************************************************************
000027AE                          2398  *Subroutine end_prog
000027AE                          2399  *Description: Ask the user if they want to run the
000027AE                          2400  *disassembler again or to exit the program
000027AE                          2401  ************************************************************
000027AE  103C 000E               2402  end_prog    MOVE.B  #14,D0
000027B2  43F9 0000298F           2403              LEA     EndingMsg,A1    *Loads , to A1
000027B8  4E4F                    2404              TRAP    #15             *Print to console
000027BA  103C 0004               2405              MOVE.B  #4,D0
000027BE  4E4F                    2406              TRAP    #15             *Load user number from keyboard
000027C0                          2407              
000027C0  B23C 0001               2408              CMP.B   #1,D1           *Check if rerun program
000027C4  6700 0018               2409              BEQ     RERUN
000027C8                          2410              
000027C8  B23C 0000               2411              CMP.B   #0,D1           *Check if ending program
000027CC  6700 0014               2412              BEQ     END
000027D0                          2413              
000027D0                          2414              
000027D0  103C 000E               2415              MOVE.B  #14,D0          *Load trap 14
000027D4  43F9 000029BD           2416              LEA     EnderMsg,A1     *Load error msg
000027DA  4E4F                    2417              TRAP    #15             *Print error msg
000027DC  60D0                    2418              BRA     end_prog        *Loop to ask for valid input
000027DE                          2419     
000027DE  4EF8 1000               2420  RERUN       JMP     WELCOME 
000027E2                          2421    
000027E2  6000 FCE8               2422  END         BRA     EXIT
000027E6                          2423  *-----------Variables---------------------------------------
000027E6                          2424  StartAdd    DS.B    9
000027EF                          2425  EndAdd      DS.B    9
000027F8                          2426  
000027F8= 00000004                2427  StartVal    DC.L    4
000027FC= 00000000                2428  EndVal      DC.L    0
00002800                          2429  
00002800= 48 65 6C 6C 6F 20 ...   2430  WelcomeMsg  DC.B    'Hello and welcome to the disassembler made by team RTX3080!',CR,LF
0000283D= 54 68 69 73 20 70 ...   2431              DC.B    'This program will disassemble a portion of memory.',CR,LF
00002871= 50 6C 65 61 73 65 ...   2432              DC.B    'Please enter locations in hexadecimal format without $ symbol.',CR,LF,0
000028B2= 50 6C 65 61 73 65 ...   2433  Request1    DC.B    'Please enter a starting address between $00000000 and $00FFFFFF:',0
000028F3= 50 6C 65 61 73 65 ...   2434  Request2    DC.B    'Please enter an ending address between $',0
0000291C= 20 61 6E 64 20 24 ...   2435  Request3    DC.B    ' and $00FFFFFF:',0
0000292C                          2436  
0000292C= 50 72 65 73 73 20 ...   2437  NewPageMsg  DC.B    'Press enter to see next page of data.',0
00002952                          2438  
00002952= 50 6C 65 61 73 65 ...   2439  ErrorMsg    DC.B    'Please enter a valid address!',CR,LF,0
00002972                          2440  
00002972= 44 61 74 61 00          2441  DataMsg     DC.B    'Data',0
00002977                          2442  
00002977= 49 6E 76 61 6C 69 ...   2443  BadCodeMsg  DC.B    'Invalid Addressing Mode',0
0000298F                          2444  
0000298F= 54 79 70 65 20 31 ...   2445  EndingMsg   DC.B    'Type 1 to run program again, 0 to exit (1/0):',0
000029BD= 50 6C 65 61 73 65 ...   2446  EndErMsg    DC.B    'Please type a valid command!',0
000029DA                          2447  
000029DA                          2448  
000029DA= 0D 0A 00                2449  NewLine     DC.B    '',CR,LF,0
000029DD= 20 20 20 00             2450  Tab         DC.B    '   ',0
000029E1= 20 00                   2451  Space1      DC.B    ' ',0
000029E3= 20 20 00                2452  Space2      DC.B    '  ',0
000029E6= 20 20 20 00             2453  Space3      DC.B    '   ',0
000029EA= 20 20 20 20 00          2454  Space4      DC.B    '    ',0
000029EF= 2C 00                   2455  Comma       DC.B    ',',0
000029F1= 2F 00                   2456  Slash       DC.B    '/',0
000029F3                          2457  Wait        DS.B    80
00002A43                          2458  
00002A43= 2E 42 00                2459  Byte        DC.B    '.B',0
00002A46= 2E 57 00                2460  Word        DC.B    '.W',0
00002A49= 2E 4C 00                2461  Long        DC.B    '.L',0
00002A4C                          2462  
00002A4C= 00                      2463  Filler      DC.B    '',0
00002A4D= 41 00                   2464  An          DC.B    'A',0
00002A4F= 44 00                   2465  Dn          DC.B    'D',0
00002A51= 28 41 00                2466  ARIStart    DC.B    '(A',0
00002A54= 29 00                   2467  ARIEnd      DC.B    ')',0
00002A56= 29 2B 00                2468  ARIPostEnd  DC.B    ')+',0
00002A59= 2D 28 41 00             2469  ARIPreStart DC.B    '-(A',0
00002A5D= 23 00                   2470  Hash        DC.B    '#',0
00002A5F= 23 24 00                2471  Immediate   DC.B    '#$',0
00002A62= 24 00                   2472  Absolute    DC.B    '$',0
00002A64                          2473  
00002A64= 4E 4F 50 00             2474  NOPmsg      DC.B    'NOP',0
00002A68= 4D 4F 56 45 00          2475  MOVEmsg     DC.B    'MOVE',0
00002A6D= 4D 4F 56 45 41 00       2476  MOVEAmsg    DC.B    'MOVEA',0
00002A73= 41 44 44 00             2477  ADDmsg      DC.B    'ADD',0
00002A77= 41 44 44 41 00          2478  ADDAmsg     DC.B    'ADDA',0
00002A7C= 41 4E 44 00             2479  ANDmsg      DC.B    'AND',0
00002A80= 52 4F 52 00             2480  RORmsg      DC.B    'ROR',0
00002A84= 52 4F 4C 00             2481  ROLmsg      DC.B    'ROL',0
00002A88= 4C 53 52 00             2482  LSRmsg      DC.B    'LSR',0
00002A8C= 4C 53 4C 00             2483  LSLmsg      DC.B    'LSL',0
00002A90= 41 53 52 00             2484  ASRmsg      DC.B    'ASR',0
00002A94= 41 53 4C 00             2485  ASLmsg      DC.B    'ASL',0
00002A98= 4D 4F 56 45 51 00       2486  MOVEQmsg    DC.B    'MOVEQ',0
00002A9E= 4D 4F 56 45 4D 00       2487  MOVEMmsg    DC.B    'MOVEM',0
00002AA4= 53 55 42 00             2488  SUBmsg      DC.B    'SUB',0
00002AA8= 4F 52 00                2489  ORmsg       DC.B    'OR',0
00002AAB= 4C 45 41 00             2490  LEAmsg      DC.B    'LEA',0
00002AAF= 4A 53 52 00             2491  JSRmsg      DC.B    'JSR',0
00002AB3= 52 54 53 00             2492  RTSmsg      DC.B    'RTS',0
00002AB7                          2493  
00002AB7= 42 52 41 00             2494  BRA         DC.B    'BRA',0
00002ABB= 42 47 54 00             2495  BGT         DC.B    'BGT',0
00002ABF= 42 4C 45 00             2496  BLE         DC.B    'BLE',0
00002AC3= 42 45 51 00             2497  BEQ         DC.B    'BEQ',0
00002AC7= 41 44 44 51 00          2498  ADDQ        DC.B    'ADDQ',0
00002ACC= 4E 4F 54 00             2499  NOT         DC.B    'NOT',0
00002AD0                          2500  
00002AD0= 30 00                   2501  reg0_msg    DC.B    '0',0
00002AD2= 31 00                   2502  reg1_msg    DC.B    '1',0
00002AD4= 32 00                   2503  reg2_msg    DC.B    '2',0
00002AD6= 33 00                   2504  reg3_msg    DC.B    '3',0
00002AD8= 34 00                   2505  reg4_msg    DC.B    '4',0
00002ADA= 35 00                   2506  reg5_msg    DC.B    '5',0
00002ADC= 36 00                   2507  reg6_msg    DC.B    '6',0
00002ADE= 37 00                   2508  reg7_msg    DC.B    '7',0
00002AE0                          2509  
00002AE0                          2510  
00002AE0                          2511              END    START

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ABSOLUTE            2A62
ADDACODE            1460
ADDAMSG             2A77
ADDCODE             13CE
ADDMSG              2A73
ADDQ                2AC7
ADDQCODE            1A00
ADDXCODE            13B2
ADD_EA              1420
AN                  2A4D
ANDCODE             14A4
ANDMSG              2A7C
AND_EA              14DA
AORLSXCODE          18E0
ARIEND              2A54
ARIPOSTEND          2A56
ARIPRESTART         2A59
ARISTART            2A51
ASLCODE             17A2
ASLMSG              2A94
ASL_REG             17FC
ASRCODE             182C
ASRMSG              2A90
ASR_REG             1886
ASXCODE             1790
ASXEACODE           18F2
BADCODEJUMP         10FC
BADCODEMSG          2977
BAD_INSTR           279E
BEQ                 2AC3
BGT                 2ABB
BLE                 2ABF
BRA                 2AB7
BYTE                2A43
CHECKEND            107E
CHECKLONG           1A82
CHECKSTART          1024
CHECKWORD           1A6C
CHK_MODE0DEST       1E92
CHK_MODE0SRC        1E28
CHK_MODE1           1ECE
CHK_MODE2           1F02
CHK_MODE3           1F36
CHK_MODE4           1F70
CHK_MOVEM           1E64
CODE_01             1172
CODE_0100           11D8
CODE_0110           12B6
CODE_0111           1362
CODE_10             119C
CODE_1001           1362
CODE_11             11B6
CODE_1100           1376
CODE_1101           1376
CODE_1110           1362
CODE_LEA            1270
CODE_MOVEM          1220
CODE_MOVEMR         1248
COMMA               29EF
CR                  D
DATAMODE            205E
DATAMODED           215C
DATAMODEDL          2170
DATAMODEP           2074
DATAMODEPD          2172
DATAMODESL          2072
DATAMSG             2972
DN                  2A4F
EA_ADD              1CD8
EA_ADDA             1CE0
EA_ADDQ             1C34
EA_AND_DEST         1CE8
EA_AND_SRCE         1CF0
EA_ASL              1D8C
EA_ASR              1D72
EA_BCC              1C56
EA_BCC16            1C78
EA_BCC32            1C82
EA_JSR              1E18
EA_LEA              1DF2
EA_LSL              1D58
EA_LSR              1D3E
EA_MOVE             1BE8
EA_MOVEMREAD        1CA2
EA_MOVEMWRITE       1CBA
EA_MOVEQ            1BFC
EA_NOT              1E20
EA_OR               1DCC
EA_REG_ERR          20A0
EA_REG_ERRD         2192
EA_ROL              1D2A
EA_ROR              1D16
EA_SUB              1DA6
END                 27E2
ENDADD              27EF
ENDERMSG            29BD
ENDINGMSG           298F
ENDSA               25F0
ENDVAL              27FC
END_PROG            27AE
ERROR               25EA
ERRORMSG            2952
EXIT                24CC
FILLER              2A4C
FINDCODE            1136
FINDXX              1148
FIND_EA_REG         2080
FIND_EA_REGD        217E
FIND_SIZE           1A50
FIND_SZ0            1A90
FIND_SZ1            1ABA
FIND_SZ2            1AEA
FIND_SZ3            1B30
FIND_SZ4            1B76
GETEND              1054
GETSTART            100E
HASH                2A5D
HIGHERROR           10C8
HT                  9
IMMEDIATE           2A5F
JSRBEQ              1342
JSRBGT              1302
JSRBLE              1322
JSRBRA              12E2
JSRCODE             19AE
JSRMSG              2AAF
LEAMSG              2AAB
LEAVEIO             10DA
LF                  A
LINE_COUNT          2606
LONG                2A49
LONGMODE            204A
LONGMODED           2148
LOWER2HEX           25DA
LOWERROR            10B6
LSLCODE             167C
LSLMSG              2A8C
LSL_REG             16D6
LSRCODE             1706
LSRMSG              2A88
LSR_REG             1760
LSXCODE             1668
LSXEACODE           1904
MAXADD              FFFFFF
MINADD              0
MODE000             1FBA
MODE000D            20BA
MODE001             1FC8
MODE001D            20C8
MODE010             1FD6
MODE010D            20D6
MODE011             1FEA
MODE011D            20EA
MODE100             1FFE
MODE100D            20FE
MODE111             2012
MODE111D            2112
MOVEACODE           1382
MOVEAMSG            2A6D
MOVECODE            1398
MOVEM111            20A0
MOVEMMSG            2A9E
MOVEMSG             2A68
MOVEM_LOOP          219C
MOVEM_READ          2192
MOVEM_WA1           21EE
MOVEM_WA2           2220
MOVEM_WA3           2252
MOVEM_WA4           2284
MOVEM_WA5           22B6
MOVEM_WA6           22E8
MOVEM_WA7           231A
MOVEM_WD0           234C
MOVEM_WD1           237E
MOVEM_WD2           23B0
MOVEM_WD3           23E2
MOVEM_WD4           2414
MOVEM_WD5           2446
MOVEM_WD6           2478
MOVEM_WD7           24AA
MOVEM_WE            24C8
MOVEM_WRITE         21BC
MOVEQCODE           19D6
MOVEQMSG            2A98
MOVESIZE            139E
MOVEXCODE           1376
NEWLINE             29DA
NEWPAGE             1116
NEWPAGEMSG          292C
NEXTPAGE            110A
NOPCODE             1136
NOPMSG              2A64
NOT                 2ACC
NOTCOMMAND          1250
NOT_MOVEQ           19FE
ORCODE              1962
ORMSG               2AA8
PRINT_A             26A6
PRINT_ABSOLUTE      268A
PRINT_ADD           24F0
PRINT_ADDA          24FA
PRINT_AND           2504
PRINT_ARIEND        26C2
PRINT_ARIPOSTEND    26D0
PRINT_ARIPRESTART   26DE
PRINT_ARISTART      26B4
PRINT_ASL           2540
PRINT_ASR           2536
PRINT_BCCEA         1C8C
PRINT_COMMA         2660
PRINT_D             2698
PRINT_DATA          2778
PRINT_IMMED         267C
PRINT_IT            2590
PRINT_JSR           257C
PRINT_LEA           2572
PRINT_LSL           252C
PRINT_LSR           2522
PRINT_MOVE          24DC
PRINT_MOVEA         24E6
PRINT_MOVEM         2554
PRINT_MOVEQ         254A
PRINT_NEWLINE       2652
PRINT_NOP           24D2
PRINT_OR            2568
PRINT_REG           26EC
PRINT_REG0          26EC
PRINT_REG1          26FE
PRINT_REG2          2710
PRINT_REG3          2722
PRINT_REG4          2734
PRINT_REG5          2746
PRINT_REG6          2758
PRINT_REG7          276A
PRINT_ROL           250E
PRINT_ROR           2518
PRINT_RTS           2586
PRINT_SIZE          1BC4
PRINT_SLASH         266E
PRINT_SUB           255E
PRINT_TABS          260A
PUSH                25E4
P_SPACE1            261A
P_SPACE2            2628
P_SPACE3            2636
P_SPACE4            2644
READMEMORY          10E0
REG0_MSG            2AD0
REG1_MSG            2AD2
REG2_MSG            2AD4
REG3_MSG            2AD6
REG4_MSG            2AD8
REG5_MSG            2ADA
REG6_MSG            2ADC
REG7_MSG            2ADE
REQUEST1            28B2
REQUEST2            28F3
REQUEST3            291C
RERUN               27DE
ROLCODE             15DE
ROLMSG              2A84
ROL_REG             1638
RORCODE             1554
RORMSG              2A80
ROR_REG             15AE
ROXCODE             153C
ROXEACODE           18CC
RTSCODE             19C8
RTSMSG              2AB3
SHIFTCODE           1518
SHIFT_EA            18B6
SLASH               29F1
SPACE1              29E1
SPACE2              29E3
SPACE3              29E6
SPACE4              29EA
START               1000
STARTADD            27E6
STARTVAL            27F8
STORE_ONE           1BE2
STRINGASCII         2598
SUBCODE             1916
SUBMSG              2AA4
SZ0_LONG            1AAC
SZ1_LONG            1ADC
SZ1_WORD            1ACE
SZ2_BYTE            1B06
SZ2_LONG            1B22
SZ2_WORD            1B14
SZ3_BYTE            1B4C
SZ3_LONG            1B68
SZ3_WORD            1B5A
SZ4_BYTE            1B9A
SZ4_LONG            1BB6
SZ4_WORD            1BA8
TAB                 29DD
TO_LETTER           25F6
TO_NUMBER           2600
UPPER2HEX           25E0
WAIT                29F3
WELCOME             1000
WELCOMEMSG          2800
WHICH_WAY           1BCC
WORD                2A46
WORDMODE            2036
WORDMODED           2134
